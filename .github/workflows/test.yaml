name: CHIP wheels test

on: push

env:
  matter_sdk_ref: v1.2.0.1

jobs:
    build_prepare:
        name: Prepare build
        runs-on: ubuntu-22.04
        outputs:
            version: ${{ steps.version.outputs.version }}
            channel: ${{ steps.version.outputs.channel }}
        steps:
            - name: Checkout build repository
              uses: actions/checkout@v3
              with:
                fetch-depth: 0
            - name: Get version
              id: version
              shell: bash
              run: |
                sudo apt-get update 
                sudo apt-get install git gcc g++ pkg-config libssl-dev libdbus-1-dev \
                libglib2.0-dev libavahi-client-dev ninja-build python3-venv python3-dev \
                python3-pip unzip libgirepository1.0-dev libcairo2-dev libreadline-dev
                version=$(echo "${{ github.ref }}" | awk -F"/" '{print $NF}')
                if [[ ! -z "${{ github.event.inputs.version }}" ]]; then
                  version="${{ github.event.inputs.version }}"
                elif [[ "${version}" =~ (main|dev) ]]; then
                  today="$(date --utc '+%Y-%m-%d')"
                  midnight_timestamp="$(date --utc +%s --date=$today)"
                  calver_date="$(date --utc --date=$today '+%Y.%-m.dev%-d')"
                  commit_count="$(git rev-list --count --since=$midnight_timestamp HEAD)"
                  commit_count="$(printf "%02d" ${commit_count})"
                  version="${calver_date}${commit_count}"
                elif [[ "${{ github.ref }}" =~ ^refs/heads/ ]]; then
                  today="$(date --utc '+%Y-%m-%d')"
                  midnight_timestamp="$(date --utc +%s --date=$today)"
                  calver_date="$(date --utc --date=$today '+%Y.%-m.dev%-d')"
                  # Remove invalid chars
                  localversion="${version}"
                  localversion="${localversion//-/}"
                  localversion="${localversion//_/}"
                  version="${calver_date}+${localversion}"
                fi
                echo "Building version $version"
                echo "version=$version" >> "$GITHUB_OUTPUT"
            - name: Checkout CHIP SDK repository
              uses: actions/checkout@v3
              with:
                  repository: project-chip/connectedhomeip
                  ref: ${{ env.matter_sdk_ref }}
                  path: ./project-chip
            - name: Checkout submodules
              working-directory: ./project-chip
              run: scripts/checkout_submodules.py --shallow --platform linux
            - name: Apply patches
              working-directory: ./project-chip
              run: |
                  for patch in ../*.patch
                  do
                      echo "Applying ${patch}"
                      patch -p1 < $patch
                  done
            - name: Bootstrap
              working-directory: ./project-chip
              run: bash scripts/bootstrap.sh
            - name: ZAP Code pre-generation
              working-directory: ./project-chip
              run: scripts/run_in_build_env.sh "scripts/codepregen.py ./zzz_pregenerated/"
            - name: Create Matter SDK tar
              working-directory: ./project-chip
              run: tar -caf ../project-chip.tar.zst --exclude .environment --use-compress-program=zstdmt .
            - name: Store Matter SDK as artifact
              uses: actions/upload-artifact@v3
              with:
                name: matter-sdk-${{ github.run_id }}
                path: ./project-chip.tar.zst

    build_linux_python_lib:
        name: Build Python wheels for Linux (${{ matrix.arch.name }})
        needs: build_prepare

        strategy:
            matrix:
                arch:
                    - name: armv7l
                      container: damienkastner/chip-build-crosscompile-armhf:0.6.25
                      runner: ubuntu-latest

        runs-on: ${{ matrix.arch.runner }}
        defaults:
            run:
                working-directory: ./project-chip

        container:
            image: ${{ matrix.arch.container }}
            volumes:
                - "/tmp/log_output:/tmp/test_logs"
            options: --sysctl "net.ipv6.conf.all.disable_ipv6=0
                net.ipv4.conf.all.forwarding=1 net.ipv6.conf.all.forwarding=1"

        steps:
            - name: Restore Matter SDK from artifacts
              uses: actions/download-artifact@v3
              with:
                name: matter-sdk-${{ github.run_id }}
            - name: Extract Matter SDK from tar
              working-directory: ./
              run: |
                rm -rf project-chip
                mkdir -p project-chip
                cd project-chip
                apt update && apt install zstd
                tar -xaf ../project-chip.tar.zst --use-compress-program=zstdmt .
                git config --global --add safe.directory "*"
                rm -rf out/
            - name: Bootstrap
              run: bash scripts/bootstrap.sh
            - name: Setup Build, Run Build and Run Tests
              run: |
                  scripts/build/gn_gen.sh --args=" \
                                                  target_os=\"linux\" \
                                                  target_cpu=\"arm\" \
                                                  sysroot=\"/opt/raspberry-buster-armhf-sysroot\" \
                                                  enable_rtti=true \
                                                  enable_pylib=true \
                                                  chip_config_memory_debug_checks=false \
                                                  chip_config_memory_debug_dmalloc=false \
                                                  chip_mdns=\"platform\" \
                                                  chip_python_version=\"devtest\"  \
                                                  chip_python_package_prefix=\"chip\" \
                                                  chip_code_pre_generated_directory=\"$(pwd)/zzz_pregenerated\" \
                                                  "
                  scripts/run_in_build_env.sh "ninja -C ./out chip-repl"
            - name: Run Python library specific unit tests
              run: |
                    scripts/run_in_build_env.sh 'pip3 install ./out/controller/python/chip_core-devtest-cp37-abi3-linux_${{ matrix.arch.name }}.whl'
                    scripts/run_in_build_env.sh 'pip3 install ./out/controller/python/chip_clusters-devtest-py3-none-any.whl'
                    scripts/run_in_build_env.sh 'pip3 install ./out/controller/python/chip_repl-devtest-py3-none-any.whl'
                    scripts/run_in_build_env.sh '(cd src/controller/python/test/unit_tests/ && python3 -m unittest -v)'