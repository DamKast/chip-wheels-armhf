From db83cac35b2544c5321342b321b2c220037dfcec Mon Sep 17 00:00:00 2001
From: Joonhaeng Heo <jh.heo@lge.com>
Date: Fri, 16 Dec 2022 15:24:00 +0900
Subject: [PATCH 1/9] Implement unpairDevice

---
 examples/android/CHIPTool/.idea/misc.xml      |  13 ++
 .../google/chip/chiptool/CHIPToolActivity.kt  |   5 +
 .../chip/chiptool/SelectActionFragment.kt     |   3 +
 .../provisioning/UnpairDeviceFragment.kt      |  60 ++++++
 .../res/layout/select_action_fragment.xml     |   8 +
 .../res/layout/unpair_device_fragment.xml     |  27 +++
 .../app/src/main/res/values/strings.xml       |   2 +
 .../commands/pairing/PairingCommand.cpp       |   1 -
 src/controller/BUILD.gn                       |   2 +
 src/controller/CHIPDeviceController.cpp       |  26 ++-
 src/controller/CHIPDeviceController.h         |   8 +-
 src/controller/DeviceUnpair.cpp               | 186 ++++++++++++++++++
 src/controller/DeviceUnpair.h                 |  88 +++++++++
 13 files changed, 425 insertions(+), 4 deletions(-)
 create mode 100644 examples/android/CHIPTool/.idea/misc.xml
 create mode 100644 examples/android/CHIPTool/app/src/main/java/com/google/chip/chiptool/provisioning/UnpairDeviceFragment.kt
 create mode 100644 examples/android/CHIPTool/app/src/main/res/layout/unpair_device_fragment.xml
 create mode 100644 src/controller/DeviceUnpair.cpp
 create mode 100644 src/controller/DeviceUnpair.h

diff --git a/examples/android/CHIPTool/.idea/misc.xml b/examples/android/CHIPTool/.idea/misc.xml
new file mode 100644
index 0000000000000..220d232dcde74
--- /dev/null
+++ b/examples/android/CHIPTool/.idea/misc.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="DesignSurface">
+    <option name="filePathToZoomLevelMap">
+      <map>
+        <entry key="app/src/main/res/layout/select_action_fragment.xml" value="0.35625" />
+        <entry key="app/src/main/res/layout/unpair_device_fragment.xml" value="0.14629629629629629" />
+      </map>
+    </option>
+  </component>
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" project-jdk-name="11" project-jdk-type="JavaSDK" />
+</project>
\ No newline at end of file
diff --git a/examples/android/CHIPTool/app/src/main/java/com/google/chip/chiptool/CHIPToolActivity.kt b/examples/android/CHIPTool/app/src/main/java/com/google/chip/chiptool/CHIPToolActivity.kt
index ce37951915e28..e7005477deb89 100644
--- a/examples/android/CHIPTool/app/src/main/java/com/google/chip/chiptool/CHIPToolActivity.kt
+++ b/examples/android/CHIPTool/app/src/main/java/com/google/chip/chiptool/CHIPToolActivity.kt
@@ -44,6 +44,7 @@ import com.google.chip.chiptool.provisioning.AddressCommissioningFragment
 import com.google.chip.chiptool.provisioning.DeviceProvisioningFragment
 import com.google.chip.chiptool.provisioning.EnterNetworkFragment
 import com.google.chip.chiptool.provisioning.ProvisionNetworkType
+import com.google.chip.chiptool.provisioning.UnpairDeviceFragment
 import com.google.chip.chiptool.setuppayloadscanner.BarcodeFragment
 import com.google.chip.chiptool.setuppayloadscanner.CHIPDeviceDetailsFragment
 import com.google.chip.chiptool.setuppayloadscanner.CHIPDeviceInfo
@@ -191,6 +192,10 @@ class CHIPToolActivity :
     showFragment(BarcodeFragment.newInstance())
   }
 
+  override fun handleUnpairDeviceClicked() {
+    showFragment(UnpairDeviceFragment.newInstance())
+  }
+
   private fun showFragment(fragment: Fragment, showOnBack: Boolean = true) {
     val fragmentTransaction = supportFragmentManager
         .beginTransaction()
diff --git a/examples/android/CHIPTool/app/src/main/java/com/google/chip/chiptool/SelectActionFragment.kt b/examples/android/CHIPTool/app/src/main/java/com/google/chip/chiptool/SelectActionFragment.kt
index 263e979bb12b2..4816469c187f6 100644
--- a/examples/android/CHIPTool/app/src/main/java/com/google/chip/chiptool/SelectActionFragment.kt
+++ b/examples/android/CHIPTool/app/src/main/java/com/google/chip/chiptool/SelectActionFragment.kt
@@ -60,6 +60,7 @@ class SelectActionFragment : Fragment() {
       clusterInteractionBtn.setOnClickListener { getCallback()?.handleClusterInteractionClicked() }
       provisionCustomFlowBtn.setOnClickListener{  getCallback()?.handleCustomFlowClicked() }
       wildcardBtn.setOnClickListener { getCallback()?.handleWildcardClicked() }
+      unpairDeviceBtn.setOnClickListener{ getCallback()?.handleUnpairDeviceClicked() }
     }
   }
 
@@ -157,6 +158,8 @@ class SelectActionFragment : Fragment() {
     fun handleWildcardClicked()
     /** Notifies listener of provision-custom-flow button click. */
     fun handleCustomFlowClicked()
+    /** Notifies listener of unpair button click. */
+    fun handleUnpairDeviceClicked()
   }
 
   companion object {
diff --git a/examples/android/CHIPTool/app/src/main/java/com/google/chip/chiptool/provisioning/UnpairDeviceFragment.kt b/examples/android/CHIPTool/app/src/main/java/com/google/chip/chiptool/provisioning/UnpairDeviceFragment.kt
new file mode 100644
index 0000000000000..5194f8d3e8361
--- /dev/null
+++ b/examples/android/CHIPTool/app/src/main/java/com/google/chip/chiptool/provisioning/UnpairDeviceFragment.kt
@@ -0,0 +1,60 @@
+package com.google.chip.chiptool.provisioning
+
+import android.os.Bundle
+import android.util.Log
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import androidx.fragment.app.Fragment
+import androidx.lifecycle.lifecycleScope
+import chip.devicecontroller.ChipClusters
+import chip.devicecontroller.ChipDeviceController
+import chip.devicecontroller.OpenCommissioningCallback
+import com.google.chip.chiptool.ChipClient
+import com.google.chip.chiptool.GenericChipDeviceListener
+import com.google.chip.chiptool.R
+import com.google.chip.chiptool.clusterclient.AddressUpdateFragment
+import kotlinx.android.synthetic.main.unpair_device_fragment.view.unpairDeviceBtn
+import kotlinx.coroutines.*
+
+class UnpairDeviceFragment : Fragment() {
+  private val deviceController: ChipDeviceController
+    get() = ChipClient.getDeviceController(requireContext())
+
+  private lateinit var scope: CoroutineScope
+
+  private lateinit var addressUpdateFragment: AddressUpdateFragment
+
+  override fun onCreateView(
+    inflater: LayoutInflater,
+    container: ViewGroup?,
+    savedInstanceState: Bundle?
+  ): View {
+    scope = viewLifecycleOwner.lifecycleScope
+
+    return inflater.inflate(R.layout.unpair_device_fragment, container, false).apply {
+      deviceController.setCompletionListener(ChipControllerCallback())
+
+      addressUpdateFragment =
+        childFragmentManager.findFragmentById(R.id.addressUpdateFragment) as AddressUpdateFragment
+
+      unpairDeviceBtn.setOnClickListener { scope.launch { unpairDeviceClick() } }
+    }
+  }
+
+  inner class ChipControllerCallback : GenericChipDeviceListener() {
+    override fun onPairingDeleted(code: Int) {
+      Log.d(TAG, "onPairingDeleted : $code")
+    }
+  }
+
+  private  fun unpairDeviceClick() {
+    deviceController.unpairDevice(addressUpdateFragment.deviceId)
+  }
+
+
+  companion object {
+    private const val TAG = "UnpairDeviceFragment"
+    fun newInstance(): UnpairDeviceFragment = UnpairDeviceFragment()
+  }
+}
diff --git a/examples/android/CHIPTool/app/src/main/res/layout/select_action_fragment.xml b/examples/android/CHIPTool/app/src/main/res/layout/select_action_fragment.xml
index 3098a32415827..cfc6b90be5853 100644
--- a/examples/android/CHIPTool/app/src/main/res/layout/select_action_fragment.xml
+++ b/examples/android/CHIPTool/app/src/main/res/layout/select_action_fragment.xml
@@ -104,6 +104,14 @@
             android:layout_marginTop="8dp"
             android:text="@string/cluster_interaction_tool" />
 
+        <Button
+            android:id="@+id/unpairDeviceBtn"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginStart="8dp"
+            android:layout_marginTop="8dp"
+            android:text="@string/unpair_device_btn_text" />
+
     </LinearLayout>
 
 </ScrollView>
diff --git a/examples/android/CHIPTool/app/src/main/res/layout/unpair_device_fragment.xml b/examples/android/CHIPTool/app/src/main/res/layout/unpair_device_fragment.xml
new file mode 100644
index 0000000000000..1494e749b4f36
--- /dev/null
+++ b/examples/android/CHIPTool/app/src/main/res/layout/unpair_device_fragment.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <androidx.fragment.app.FragmentContainerView
+        android:id="@+id/addressUpdateFragment"
+        android:name="com.google.chip.chiptool.clusterclient.AddressUpdateFragment"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"/>
+
+    <Button
+        android:id="@+id/unpairDeviceBtn"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:layout_margin="10dp"
+        android:text="@string/unpair_device_btn_text"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toBottomOf="@id/addressUpdateFragment"/>
+
+</androidx.constraintlayout.widget.ConstraintLayout>
diff --git a/examples/android/CHIPTool/app/src/main/res/values/strings.xml b/examples/android/CHIPTool/app/src/main/res/values/strings.xml
index 1035876b48917..4bc4263821bba 100644
--- a/examples/android/CHIPTool/app/src/main/res/values/strings.xml
+++ b/examples/android/CHIPTool/app/src/main/res/values/strings.xml
@@ -174,4 +174,6 @@
     <string name="select_a_cluster">Select a cluster</string>
     <string name="endpoint_name">Endpoint: </string>
     <string name="wifi_connect_btn_text">Connect</string>
+
+    <string name="unpair_device_btn_text">Unpair</string>
 </resources>
diff --git a/examples/chip-tool/commands/pairing/PairingCommand.cpp b/examples/chip-tool/commands/pairing/PairingCommand.cpp
index adc560a812fe1..91a4a6ced4dc5 100644
--- a/examples/chip-tool/commands/pairing/PairingCommand.cpp
+++ b/examples/chip-tool/commands/pairing/PairingCommand.cpp
@@ -162,7 +162,6 @@ CHIP_ERROR PairingCommand::PairWithMdns(NodeId remoteId)
 CHIP_ERROR PairingCommand::Unpair(NodeId remoteId)
 {
     CHIP_ERROR err = CurrentCommissioner().UnpairDevice(remoteId);
-    SetCommandExitStatus(err);
     return err;
 }
 
diff --git a/src/controller/BUILD.gn b/src/controller/BUILD.gn
index eabc7062030d4..fb9d00ff1009a 100644
--- a/src/controller/BUILD.gn
+++ b/src/controller/BUILD.gn
@@ -48,6 +48,8 @@ static_library("controller") {
       "CommissioningWindowOpener.h",
       "DeviceDiscoveryDelegate.h",
       "DevicePairingDelegate.h",
+      "DeviceUnpair.cpp",
+      "DeviceUnpair.h",
       "EmptyDataModelHandler.cpp",
       "ExampleOperationalCredentialsIssuer.cpp",
       "ExampleOperationalCredentialsIssuer.h",
diff --git a/src/controller/CHIPDeviceController.cpp b/src/controller/CHIPDeviceController.cpp
index 49bd9848d8f77..0f9c1e79fed32 100644
--- a/src/controller/CHIPDeviceController.cpp
+++ b/src/controller/CHIPDeviceController.cpp
@@ -894,8 +894,30 @@ CHIP_ERROR DeviceCommissioner::StopPairing(NodeId remoteDeviceId)
 
 CHIP_ERROR DeviceCommissioner::UnpairDevice(NodeId remoteDeviceId)
 {
-    // TODO: Send unpairing message to the remote device.
-    return CHIP_NO_ERROR;
+    CHIP_ERROR err = CHIP_NO_ERROR;
+    MATTER_TRACE_EVENT_SCOPE("UnpairDevice", "DeviceCommissioner");
+
+    Platform::UniquePtr<DeviceUnpair> deviceUnpair(new DeviceUnpair());
+    deviceUnpair->RegisterCallback(this);
+    CommissioneeDeviceProxy * commissioneeDeviceProxy = nullptr;
+    if (CHIP_NO_ERROR == GetDeviceBeingCommissioned(remoteDeviceId, &commissioneeDeviceProxy)) {
+        deviceUnpair->UnpairDevice(commissioneeDeviceProxy, remoteDeviceId);
+    } else {
+        err = GetConnectedDevice(remoteDeviceId, &deviceUnpair->GetConnectedCallback(), &deviceUnpair->GetConnectionFailureCallback());
+    }
+
+    mDeviceUnpair = std::move(deviceUnpair);
+
+    return err;
+}
+
+void DeviceCommissioner::OnDeviceUnpair(NodeId remoteDeviceId, CHIP_ERROR err)
+{
+    mDeviceUnpair = nullptr;
+    if (mPairingDelegate != nullptr)
+    {
+        mPairingDelegate->OnPairingDeleted(err);
+    }
 }
 
 void DeviceCommissioner::RendezvousCleanup(CHIP_ERROR status)
diff --git a/src/controller/CHIPDeviceController.h b/src/controller/CHIPDeviceController.h
index e98c9116881c9..f15bfb652ff21 100644
--- a/src/controller/CHIPDeviceController.h
+++ b/src/controller/CHIPDeviceController.h
@@ -40,6 +40,7 @@
 #include <controller/CommissioneeDeviceProxy.h>
 #include <controller/CommissioningDelegate.h>
 #include <controller/DevicePairingDelegate.h>
+#include <controller/DeviceUnpair.h>
 #include <controller/OperationalCredentialsDelegate.h>
 #include <controller/SetUpCodePairer.h>
 #include <credentials/FabricTable.h>
@@ -370,7 +371,8 @@ class DLL_EXPORT DeviceCommissioner : public DeviceController,
                                       public Protocols::UserDirectedCommissioning::InstanceNameResolver,
 #endif
                                       public SessionEstablishmentDelegate,
-                                      public app::ClusterStateCache::Callback
+                                      public app::ClusterStateCache::Callback,
+                                      public DeviceUnpair::Callback
 {
 public:
     DeviceCommissioner();
@@ -530,6 +532,8 @@ class DLL_EXPORT DeviceCommissioner : public DeviceController,
      */
     CHIP_ERROR UnpairDevice(NodeId remoteDeviceId);
 
+    void OnDeviceUnpair(NodeId remoteDeviceId, CHIP_ERROR err) override;
+
     //////////// SessionEstablishmentDelegate Implementation ///////////////
     void OnSessionEstablishmentError(CHIP_ERROR error) override;
     void OnSessionEstablished(const SessionHandle & session) override;
@@ -912,6 +916,8 @@ class DLL_EXPORT DeviceCommissioner : public DeviceController,
     Credentials::AttestationVerificationResult mAttestationResult;
     Platform::UniquePtr<Credentials::DeviceAttestationVerifier::AttestationDeviceInfo> mAttestationDeviceInfo;
     Credentials::DeviceAttestationVerifier * mDeviceAttestationVerifier = nullptr;
+
+    Platform::UniquePtr<DeviceUnpair> mDeviceUnpair;
 };
 
 } // namespace Controller
diff --git a/src/controller/DeviceUnpair.cpp b/src/controller/DeviceUnpair.cpp
new file mode 100644
index 0000000000000..d1d94532d6cb2
--- /dev/null
+++ b/src/controller/DeviceUnpair.cpp
@@ -0,0 +1,186 @@
+/*
+ *
+ *    Copyright (c) 2021 Project CHIP Authors
+ *    All rights reserved.
+ *
+ *    Licensed under the Apache License, Version 2.0 (the "License");
+ *    you may not use this file except in compliance with the License.
+ *    You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *    Unless required by applicable law or agreed to in writing, software
+ *    distributed under the License is distributed on an "AS IS" BASIS,
+ *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *    See the License for the specific language governing permissions and
+ *    limitations under the License.
+ */
+
+#include <controller/DeviceUnpair.h>
+
+#include <controller-clusters/zap-generated/CHIPClusters.h>
+#include <app-common/zap-generated/cluster-objects.h>
+#include <app/InteractionModelEngine.h>
+
+using namespace chip::app::Clusters;
+namespace chip {
+namespace Controller {
+
+DeviceUnpair::DeviceUnpair() : mOnDeviceConnectedCallback(OnDeviceConnectedFn, this),
+                            mOnDeviceConnectionFailureCallback(OnDeviceConnectionFailureFn, this)
+{}
+
+void DeviceUnpair::RegisterCallback(Callback *callback)
+{
+    mCallback = callback;
+}
+void DeviceUnpair::UnpairDevice(DeviceProxy * proxy, NodeId remoteDeviceId)
+{
+    mRemoteDeviceId = remoteDeviceId;
+    PerformDeviceUnpairStep(proxy, UnpairDeviceStage::kReadCurrentFabricIndex, CHIP_NO_ERROR);
+}
+
+void DeviceUnpair::PerformDeviceUnpairStep(DeviceProxy * proxy, UnpairDeviceStage stage, CHIP_ERROR err)
+{
+    mProxy = proxy;
+    mStage = stage;
+
+    switch (stage)
+    {
+        case kReadCurrentFabricIndex:
+        {
+            ReadCurrentFabricIndex(proxy);
+            break;
+        }
+        case kSendRemoveFabric:
+        {
+            SendRemoveFabricIndex(proxy, mFabricIndex);
+            break;
+        }
+        case kUnpairError:
+        case kUnpairCleanUp:
+        default:
+        {
+            FinishUnpairDevice(err);
+            break;
+        }
+    }
+}
+
+void DeviceUnpair::ReadCurrentFabricIndex(DeviceProxy *proxy)
+{
+    app::InteractionModelEngine * engine = app::InteractionModelEngine::GetInstance();
+    app::ReadPrepareParams readParams(proxy->GetSecureSession().Value());
+
+    app::AttributePathParams readPaths[1];
+    readPaths[0] = app::AttributePathParams(OperationalCredentials::Id,
+                                            OperationalCredentials::Attributes::CurrentFabricIndex::Id);
+
+    readParams.mpAttributePathParamsList    = readPaths;
+    readParams.mAttributePathParamsListSize = 1;
+    readParams.mIsFabricFiltered = false;
+
+    auto attributeCache = Platform::MakeUnique<app::ClusterStateCache>(*this);
+    auto readClient     = Platform::MakeUnique<app::ReadClient>(
+        engine, proxy->GetExchangeManager(), attributeCache->GetBufferedCallback(), app::ReadClient::InteractionType::Read);
+    CHIP_ERROR err = readClient->SendRequest(readParams);
+    if (err != CHIP_NO_ERROR)
+    {
+        ChipLogError(Controller, "Failed to send read request for networking clusters");
+        PerformDeviceUnpairStep(proxy, UnpairDeviceStage::kUnpairError, err);
+        return;
+    }
+    
+    mAttributeCache = std::move(attributeCache);
+    mReadClient     = std::move(readClient);
+}
+
+void DeviceUnpair::SendRemoveFabricIndex(DeviceProxy *proxy, FabricIndex fabricIndex)
+{
+    if (fabricIndex == kUndefinedFabricIndex) {
+        PerformDeviceUnpairStep(nullptr, UnpairDeviceStage::kUnpairError, CHIP_ERROR_INVALID_FABRIC_INDEX);
+        return;
+    }
+    ChipLogProgress(Controller, "SendRemoveFabricIndex : %u", fabricIndex);
+
+    OperationalCredentials::Commands::RemoveFabric::Type request;
+    request.fabricIndex = fabricIndex;
+
+    OperationalCredentialsCluster cluster(*proxy->GetExchangeManager(), proxy->GetSecureSession().Value(), 0);
+
+    cluster.InvokeCommand(request, this, OnRemoveFabric, OnCommandFailure);
+}
+
+void DeviceUnpair::FinishUnpairDevice(CHIP_ERROR err)
+{
+    mAttributeCache = nullptr;
+    mReadClient = nullptr;
+    mProxy = nullptr;
+    mOperationalDeviceProxy = nullptr;
+
+    if (mCallback != nullptr) {
+        mCallback->OnDeviceUnpair(mRemoteDeviceId, err);
+    }
+}
+
+void DeviceUnpair::OnDeviceConnectedFn(void * context, Messaging::ExchangeManager & exchangeMgr,
+                                             SessionHandle & sessionHandle)
+{
+    DeviceUnpair * deviceUnpair = static_cast<DeviceUnpair *>(context);
+    VerifyOrReturn(deviceUnpair != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
+
+    auto proxy = Platform::MakeShared<OperationalDeviceProxy>(&exchangeMgr, sessionHandle);
+    deviceUnpair->mOperationalDeviceProxy = std::move(proxy);
+    deviceUnpair->PerformDeviceUnpairStep(deviceUnpair->mOperationalDeviceProxy.get(), UnpairDeviceStage::kReadCurrentFabricIndex, CHIP_NO_ERROR);
+}
+
+void DeviceUnpair::OnDeviceConnectionFailureFn(void * context, const ScopedNodeId & peerId, CHIP_ERROR err)
+{
+    ChipLogProgress(Controller, "OnDeviceConnectionFailureFn %s", err.AsString());
+
+    DeviceUnpair * deviceUnpair = static_cast<DeviceUnpair *>(context);
+    VerifyOrReturn(deviceUnpair != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
+
+    deviceUnpair->PerformDeviceUnpairStep(nullptr, UnpairDeviceStage::kUnpairError, err);
+}
+
+void DeviceUnpair::OnDone(app::ReadClient * apReadClient) {
+    FabricIndex fabricIndex;
+    CHIP_ERROR err = CHIP_NO_ERROR;
+    err = mAttributeCache->ForEachAttribute(OperationalCredentials::Id, [this, &fabricIndex](const app::ConcreteAttributePath & path) {
+        if (path.mAttributeId != OperationalCredentials::Attributes::CurrentFabricIndex::Id)
+        {
+            // Continue on
+            return CHIP_NO_ERROR;
+        }
+
+        switch (path.mAttributeId)
+        {
+        case OperationalCredentials::Attributes::CurrentFabricIndex::Id:
+            return this->mAttributeCache->Get<OperationalCredentials::Attributes::CurrentFabricIndex::TypeInfo>(path, fabricIndex);
+        default:
+            return CHIP_NO_ERROR;
+        }
+    });
+    mFabricIndex = fabricIndex;
+    PerformDeviceUnpairStep(mProxy, UnpairDeviceStage::kSendRemoveFabric, CHIP_NO_ERROR);
+}
+
+void DeviceUnpair::OnRemoveFabric(void * context,
+                                       const OperationalCredentials::Commands::NOCResponse::DecodableType & data) {
+    DeviceUnpair * deviceUnpair = static_cast<DeviceUnpair *>(context);
+    VerifyOrReturn(deviceUnpair != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
+
+    deviceUnpair->PerformDeviceUnpairStep(nullptr, UnpairDeviceStage::kUnpairCleanUp, CHIP_NO_ERROR);
+}
+
+void DeviceUnpair::OnCommandFailure(void * context, CHIP_ERROR err) {
+    ChipLogProgress(Controller, "OnCommandFailure %s", err.AsString());
+
+    DeviceUnpair * deviceUnpair = static_cast<DeviceUnpair *>(context);
+    VerifyOrReturn(deviceUnpair != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
+
+    deviceUnpair->PerformDeviceUnpairStep(nullptr, UnpairDeviceStage::kUnpairError, err);
+}
+}
+}
\ No newline at end of file
diff --git a/src/controller/DeviceUnpair.h b/src/controller/DeviceUnpair.h
new file mode 100644
index 0000000000000..088369ff139c3
--- /dev/null
+++ b/src/controller/DeviceUnpair.h
@@ -0,0 +1,88 @@
+/*
+ *
+ *    Copyright (c) 2021 Project CHIP Authors
+ *    All rights reserved.
+ *
+ *    Licensed under the Apache License, Version 2.0 (the "License");
+ *    you may not use this file except in compliance with the License.
+ *    You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *    Unless required by applicable law or agreed to in writing, software
+ *    distributed under the License is distributed on an "AS IS" BASIS,
+ *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *    See the License for the specific language governing permissions and
+ *    limitations under the License.
+ */
+
+#pragma once
+
+#include <app/OperationalSessionSetup.h>
+#include <app/ClusterStateCache.h>
+#include <lib/core/CHIPCallback.h>
+
+namespace chip {
+namespace Controller {
+
+enum UnpairDeviceStage : uint8_t
+{
+    kUnpairError,
+    kReadCurrentFabricIndex,
+    kSendRemoveFabric,
+    kUnpairCleanUp,
+};
+
+class DLL_EXPORT DeviceUnpair : public app::ClusterStateCache::Callback
+{
+public:
+    class Callback {
+    public:
+        virtual ~Callback() {};
+        virtual void OnDeviceUnpair(NodeId remoteDeviceId, CHIP_ERROR err) {};
+    };
+
+    DeviceUnpair();
+    ~DeviceUnpair() {}
+
+    void RegisterCallback(Callback *callback);
+    void UnpairDevice(DeviceProxy *proxy, NodeId remoteDeviceId);
+
+private:
+    Callback *mCallback = nullptr;
+
+    chip::Callback::Callback<OnDeviceConnected> mOnDeviceConnectedCallback;
+    chip::Callback::Callback<OnDeviceConnectionFailure> mOnDeviceConnectionFailureCallback;
+
+    Platform::UniquePtr<app::ClusterStateCache> mAttributeCache;
+    Platform::UniquePtr<app::ReadClient> mReadClient;
+
+    DeviceProxy *mProxy = nullptr;
+    Platform::SharedPtr<OperationalDeviceProxy> mOperationalDeviceProxy;
+    NodeId mRemoteDeviceId;
+    FabricIndex mFabricIndex = kUndefinedFabricIndex;
+    UnpairDeviceStage mStage = UnpairDeviceStage::kUnpairError;
+
+    void PerformDeviceUnpairStep(DeviceProxy *proxy, UnpairDeviceStage stage, CHIP_ERROR err);
+
+    void ReadCurrentFabricIndex(DeviceProxy *proxy);
+    void SendRemoveFabricIndex(DeviceProxy *proxy, FabricIndex fabricIndex);
+    void FinishUnpairDevice(CHIP_ERROR err);
+
+    void OnDone(app::ReadClient * apReadClient);
+
+    static void OnDeviceConnectedFn(void * context, Messaging::ExchangeManager & exchangeMgr,
+                                             SessionHandle & sessionHandle);
+    static void OnDeviceConnectionFailureFn(void * context, const ScopedNodeId & peerId, CHIP_ERROR error);
+
+    static void OnRemoveFabric(void * context,
+                                       const chip::app::Clusters::OperationalCredentials::Commands::NOCResponse::DecodableType & data);
+
+    static void OnCommandFailure(void * context, CHIP_ERROR error);
+public:
+    chip::Callback::Callback<OnDeviceConnected> & GetConnectedCallback() { return mOnDeviceConnectedCallback; }
+    chip::Callback::Callback<OnDeviceConnectionFailure> & GetConnectionFailureCallback() { return mOnDeviceConnectionFailureCallback; }
+};
+
+}
+}
\ No newline at end of file

From b2807336fc1ed2fb32fc4e96a34659f0391a508f Mon Sep 17 00:00:00 2001
From: Joonhaeng Heo <jh.heo@lge.com>
Date: Mon, 19 Dec 2022 15:06:01 +0900
Subject: [PATCH 2/9] Check restyle

---
 src/controller/CHIPDeviceController.cpp |  10 +-
 src/controller/DeviceUnpair.cpp         | 116 ++++++++++++------------
 src/controller/DeviceUnpair.h           |  38 ++++----
 3 files changed, 87 insertions(+), 77 deletions(-)

diff --git a/src/controller/CHIPDeviceController.cpp b/src/controller/CHIPDeviceController.cpp
index 0f9c1e79fed32..a5e9d3e3496bc 100644
--- a/src/controller/CHIPDeviceController.cpp
+++ b/src/controller/CHIPDeviceController.cpp
@@ -900,10 +900,14 @@ CHIP_ERROR DeviceCommissioner::UnpairDevice(NodeId remoteDeviceId)
     Platform::UniquePtr<DeviceUnpair> deviceUnpair(new DeviceUnpair());
     deviceUnpair->RegisterCallback(this);
     CommissioneeDeviceProxy * commissioneeDeviceProxy = nullptr;
-    if (CHIP_NO_ERROR == GetDeviceBeingCommissioned(remoteDeviceId, &commissioneeDeviceProxy)) {
+    if (CHIP_NO_ERROR == GetDeviceBeingCommissioned(remoteDeviceId, &commissioneeDeviceProxy))
+    {
         deviceUnpair->UnpairDevice(commissioneeDeviceProxy, remoteDeviceId);
-    } else {
-        err = GetConnectedDevice(remoteDeviceId, &deviceUnpair->GetConnectedCallback(), &deviceUnpair->GetConnectionFailureCallback());
+    }
+    else
+    {
+        err = GetConnectedDevice(remoteDeviceId, &deviceUnpair->GetConnectedCallback(),
+                                 &deviceUnpair->GetConnectionFailureCallback());
     }
 
     mDeviceUnpair = std::move(deviceUnpair);
diff --git a/src/controller/DeviceUnpair.cpp b/src/controller/DeviceUnpair.cpp
index d1d94532d6cb2..96dbb8fbc8086 100644
--- a/src/controller/DeviceUnpair.cpp
+++ b/src/controller/DeviceUnpair.cpp
@@ -18,19 +18,19 @@
 
 #include <controller/DeviceUnpair.h>
 
-#include <controller-clusters/zap-generated/CHIPClusters.h>
 #include <app-common/zap-generated/cluster-objects.h>
 #include <app/InteractionModelEngine.h>
+#include <controller-clusters/zap-generated/CHIPClusters.h>
 
 using namespace chip::app::Clusters;
 namespace chip {
 namespace Controller {
 
-DeviceUnpair::DeviceUnpair() : mOnDeviceConnectedCallback(OnDeviceConnectedFn, this),
-                            mOnDeviceConnectionFailureCallback(OnDeviceConnectionFailureFn, this)
+DeviceUnpair::DeviceUnpair() :
+    mOnDeviceConnectedCallback(OnDeviceConnectedFn, this), mOnDeviceConnectionFailureCallback(OnDeviceConnectionFailureFn, this)
 {}
 
-void DeviceUnpair::RegisterCallback(Callback *callback)
+void DeviceUnpair::RegisterCallback(Callback * callback)
 {
     mCallback = callback;
 }
@@ -47,38 +47,34 @@ void DeviceUnpair::PerformDeviceUnpairStep(DeviceProxy * proxy, UnpairDeviceStag
 
     switch (stage)
     {
-        case kReadCurrentFabricIndex:
-        {
-            ReadCurrentFabricIndex(proxy);
-            break;
-        }
-        case kSendRemoveFabric:
-        {
-            SendRemoveFabricIndex(proxy, mFabricIndex);
-            break;
-        }
-        case kUnpairError:
-        case kUnpairCleanUp:
-        default:
-        {
-            FinishUnpairDevice(err);
-            break;
-        }
+    case kReadCurrentFabricIndex: {
+        ReadCurrentFabricIndex(proxy);
+        break;
+    }
+    case kSendRemoveFabric: {
+        SendRemoveFabricIndex(proxy, mFabricIndex);
+        break;
+    }
+    case kUnpairError:
+    case kUnpairCleanUp:
+    default: {
+        FinishUnpairDevice(err);
+        break;
+    }
     }
 }
 
-void DeviceUnpair::ReadCurrentFabricIndex(DeviceProxy *proxy)
+void DeviceUnpair::ReadCurrentFabricIndex(DeviceProxy * proxy)
 {
     app::InteractionModelEngine * engine = app::InteractionModelEngine::GetInstance();
     app::ReadPrepareParams readParams(proxy->GetSecureSession().Value());
 
     app::AttributePathParams readPaths[1];
-    readPaths[0] = app::AttributePathParams(OperationalCredentials::Id,
-                                            OperationalCredentials::Attributes::CurrentFabricIndex::Id);
+    readPaths[0] = app::AttributePathParams(OperationalCredentials::Id, OperationalCredentials::Attributes::CurrentFabricIndex::Id);
 
     readParams.mpAttributePathParamsList    = readPaths;
     readParams.mAttributePathParamsListSize = 1;
-    readParams.mIsFabricFiltered = false;
+    readParams.mIsFabricFiltered            = false;
 
     auto attributeCache = Platform::MakeUnique<app::ClusterStateCache>(*this);
     auto readClient     = Platform::MakeUnique<app::ReadClient>(
@@ -90,14 +86,15 @@ void DeviceUnpair::ReadCurrentFabricIndex(DeviceProxy *proxy)
         PerformDeviceUnpairStep(proxy, UnpairDeviceStage::kUnpairError, err);
         return;
     }
-    
+
     mAttributeCache = std::move(attributeCache);
     mReadClient     = std::move(readClient);
 }
 
-void DeviceUnpair::SendRemoveFabricIndex(DeviceProxy *proxy, FabricIndex fabricIndex)
+void DeviceUnpair::SendRemoveFabricIndex(DeviceProxy * proxy, FabricIndex fabricIndex)
 {
-    if (fabricIndex == kUndefinedFabricIndex) {
+    if (fabricIndex == kUndefinedFabricIndex)
+    {
         PerformDeviceUnpairStep(nullptr, UnpairDeviceStage::kUnpairError, CHIP_ERROR_INVALID_FABRIC_INDEX);
         return;
     }
@@ -113,25 +110,26 @@ void DeviceUnpair::SendRemoveFabricIndex(DeviceProxy *proxy, FabricIndex fabricI
 
 void DeviceUnpair::FinishUnpairDevice(CHIP_ERROR err)
 {
-    mAttributeCache = nullptr;
-    mReadClient = nullptr;
-    mProxy = nullptr;
+    mAttributeCache         = nullptr;
+    mReadClient             = nullptr;
+    mProxy                  = nullptr;
     mOperationalDeviceProxy = nullptr;
 
-    if (mCallback != nullptr) {
+    if (mCallback != nullptr)
+    {
         mCallback->OnDeviceUnpair(mRemoteDeviceId, err);
     }
 }
 
-void DeviceUnpair::OnDeviceConnectedFn(void * context, Messaging::ExchangeManager & exchangeMgr,
-                                             SessionHandle & sessionHandle)
+void DeviceUnpair::OnDeviceConnectedFn(void * context, Messaging::ExchangeManager & exchangeMgr, SessionHandle & sessionHandle)
 {
     DeviceUnpair * deviceUnpair = static_cast<DeviceUnpair *>(context);
     VerifyOrReturn(deviceUnpair != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
 
-    auto proxy = Platform::MakeShared<OperationalDeviceProxy>(&exchangeMgr, sessionHandle);
+    auto proxy                            = Platform::MakeShared<OperationalDeviceProxy>(&exchangeMgr, sessionHandle);
     deviceUnpair->mOperationalDeviceProxy = std::move(proxy);
-    deviceUnpair->PerformDeviceUnpairStep(deviceUnpair->mOperationalDeviceProxy.get(), UnpairDeviceStage::kReadCurrentFabricIndex, CHIP_NO_ERROR);
+    deviceUnpair->PerformDeviceUnpairStep(deviceUnpair->mOperationalDeviceProxy.get(), UnpairDeviceStage::kReadCurrentFabricIndex,
+                                          CHIP_NO_ERROR);
 }
 
 void DeviceUnpair::OnDeviceConnectionFailureFn(void * context, const ScopedNodeId & peerId, CHIP_ERROR err)
@@ -144,37 +142,41 @@ void DeviceUnpair::OnDeviceConnectionFailureFn(void * context, const ScopedNodeI
     deviceUnpair->PerformDeviceUnpairStep(nullptr, UnpairDeviceStage::kUnpairError, err);
 }
 
-void DeviceUnpair::OnDone(app::ReadClient * apReadClient) {
+void DeviceUnpair::OnDone(app::ReadClient * apReadClient)
+{
     FabricIndex fabricIndex;
     CHIP_ERROR err = CHIP_NO_ERROR;
-    err = mAttributeCache->ForEachAttribute(OperationalCredentials::Id, [this, &fabricIndex](const app::ConcreteAttributePath & path) {
-        if (path.mAttributeId != OperationalCredentials::Attributes::CurrentFabricIndex::Id)
-        {
-            // Continue on
-            return CHIP_NO_ERROR;
-        }
-
-        switch (path.mAttributeId)
-        {
-        case OperationalCredentials::Attributes::CurrentFabricIndex::Id:
-            return this->mAttributeCache->Get<OperationalCredentials::Attributes::CurrentFabricIndex::TypeInfo>(path, fabricIndex);
-        default:
-            return CHIP_NO_ERROR;
-        }
-    });
+    err            = mAttributeCache->ForEachAttribute(
+        OperationalCredentials::Id, [this, &fabricIndex](const app::ConcreteAttributePath & path) {
+            if (path.mAttributeId != OperationalCredentials::Attributes::CurrentFabricIndex::Id)
+            {
+                // Continue on
+                return CHIP_NO_ERROR;
+            }
+
+            switch (path.mAttributeId)
+            {
+            case OperationalCredentials::Attributes::CurrentFabricIndex::Id:
+                return this->mAttributeCache->Get<OperationalCredentials::Attributes::CurrentFabricIndex::TypeInfo>(path,
+                                                                                                                    fabricIndex);
+            default:
+                return CHIP_NO_ERROR;
+            }
+        });
     mFabricIndex = fabricIndex;
     PerformDeviceUnpairStep(mProxy, UnpairDeviceStage::kSendRemoveFabric, CHIP_NO_ERROR);
 }
 
-void DeviceUnpair::OnRemoveFabric(void * context,
-                                       const OperationalCredentials::Commands::NOCResponse::DecodableType & data) {
+void DeviceUnpair::OnRemoveFabric(void * context, const OperationalCredentials::Commands::NOCResponse::DecodableType & data)
+{
     DeviceUnpair * deviceUnpair = static_cast<DeviceUnpair *>(context);
     VerifyOrReturn(deviceUnpair != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
 
     deviceUnpair->PerformDeviceUnpairStep(nullptr, UnpairDeviceStage::kUnpairCleanUp, CHIP_NO_ERROR);
 }
 
-void DeviceUnpair::OnCommandFailure(void * context, CHIP_ERROR err) {
+void DeviceUnpair::OnCommandFailure(void * context, CHIP_ERROR err)
+{
     ChipLogProgress(Controller, "OnCommandFailure %s", err.AsString());
 
     DeviceUnpair * deviceUnpair = static_cast<DeviceUnpair *>(context);
@@ -182,5 +184,5 @@ void DeviceUnpair::OnCommandFailure(void * context, CHIP_ERROR err) {
 
     deviceUnpair->PerformDeviceUnpairStep(nullptr, UnpairDeviceStage::kUnpairError, err);
 }
-}
-}
\ No newline at end of file
+} // namespace Controller
+} // namespace chip
diff --git a/src/controller/DeviceUnpair.h b/src/controller/DeviceUnpair.h
index 088369ff139c3..3d50772047b6f 100644
--- a/src/controller/DeviceUnpair.h
+++ b/src/controller/DeviceUnpair.h
@@ -18,8 +18,8 @@
 
 #pragma once
 
-#include <app/OperationalSessionSetup.h>
 #include <app/ClusterStateCache.h>
+#include <app/OperationalSessionSetup.h>
 #include <lib/core/CHIPCallback.h>
 
 namespace chip {
@@ -36,20 +36,21 @@ enum UnpairDeviceStage : uint8_t
 class DLL_EXPORT DeviceUnpair : public app::ClusterStateCache::Callback
 {
 public:
-    class Callback {
+    class Callback
+    {
     public:
-        virtual ~Callback() {};
-        virtual void OnDeviceUnpair(NodeId remoteDeviceId, CHIP_ERROR err) {};
+        virtual ~Callback(){};
+        virtual void OnDeviceUnpair(NodeId remoteDeviceId, CHIP_ERROR err){};
     };
 
     DeviceUnpair();
     ~DeviceUnpair() {}
 
-    void RegisterCallback(Callback *callback);
-    void UnpairDevice(DeviceProxy *proxy, NodeId remoteDeviceId);
+    void RegisterCallback(Callback * callback);
+    void UnpairDevice(DeviceProxy * proxy, NodeId remoteDeviceId);
 
 private:
-    Callback *mCallback = nullptr;
+    Callback * mCallback = nullptr;
 
     chip::Callback::Callback<OnDeviceConnected> mOnDeviceConnectedCallback;
     chip::Callback::Callback<OnDeviceConnectionFailure> mOnDeviceConnectionFailureCallback;
@@ -57,32 +58,35 @@ class DLL_EXPORT DeviceUnpair : public app::ClusterStateCache::Callback
     Platform::UniquePtr<app::ClusterStateCache> mAttributeCache;
     Platform::UniquePtr<app::ReadClient> mReadClient;
 
-    DeviceProxy *mProxy = nullptr;
+    DeviceProxy * mProxy = nullptr;
     Platform::SharedPtr<OperationalDeviceProxy> mOperationalDeviceProxy;
     NodeId mRemoteDeviceId;
     FabricIndex mFabricIndex = kUndefinedFabricIndex;
     UnpairDeviceStage mStage = UnpairDeviceStage::kUnpairError;
 
-    void PerformDeviceUnpairStep(DeviceProxy *proxy, UnpairDeviceStage stage, CHIP_ERROR err);
+    void PerformDeviceUnpairStep(DeviceProxy * proxy, UnpairDeviceStage stage, CHIP_ERROR err);
 
-    void ReadCurrentFabricIndex(DeviceProxy *proxy);
-    void SendRemoveFabricIndex(DeviceProxy *proxy, FabricIndex fabricIndex);
+    void ReadCurrentFabricIndex(DeviceProxy * proxy);
+    void SendRemoveFabricIndex(DeviceProxy * proxy, FabricIndex fabricIndex);
     void FinishUnpairDevice(CHIP_ERROR err);
 
     void OnDone(app::ReadClient * apReadClient);
 
-    static void OnDeviceConnectedFn(void * context, Messaging::ExchangeManager & exchangeMgr,
-                                             SessionHandle & sessionHandle);
+    static void OnDeviceConnectedFn(void * context, Messaging::ExchangeManager & exchangeMgr, SessionHandle & sessionHandle);
     static void OnDeviceConnectionFailureFn(void * context, const ScopedNodeId & peerId, CHIP_ERROR error);
 
     static void OnRemoveFabric(void * context,
-                                       const chip::app::Clusters::OperationalCredentials::Commands::NOCResponse::DecodableType & data);
+                               const chip::app::Clusters::OperationalCredentials::Commands::NOCResponse::DecodableType & data);
 
     static void OnCommandFailure(void * context, CHIP_ERROR error);
+
 public:
     chip::Callback::Callback<OnDeviceConnected> & GetConnectedCallback() { return mOnDeviceConnectedCallback; }
-    chip::Callback::Callback<OnDeviceConnectionFailure> & GetConnectionFailureCallback() { return mOnDeviceConnectionFailureCallback; }
+    chip::Callback::Callback<OnDeviceConnectionFailure> & GetConnectionFailureCallback()
+    {
+        return mOnDeviceConnectionFailureCallback;
+    }
 };
 
-}
-}
\ No newline at end of file
+} // namespace Controller
+} // namespace chip

From 85542fe843a7f4c6ff323c04e6ad3a1092466229 Mon Sep 17 00:00:00 2001
From: Joonhaeng Heo <jh.heo@lge.com>
Date: Mon, 19 Dec 2022 15:07:24 +0900
Subject: [PATCH 3/9] Delete unused file

---
 examples/android/CHIPTool/.idea/misc.xml | 13 -------------
 1 file changed, 13 deletions(-)
 delete mode 100644 examples/android/CHIPTool/.idea/misc.xml

diff --git a/examples/android/CHIPTool/.idea/misc.xml b/examples/android/CHIPTool/.idea/misc.xml
deleted file mode 100644
index 220d232dcde74..0000000000000
--- a/examples/android/CHIPTool/.idea/misc.xml
+++ /dev/null
@@ -1,13 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="DesignSurface">
-    <option name="filePathToZoomLevelMap">
-      <map>
-        <entry key="app/src/main/res/layout/select_action_fragment.xml" value="0.35625" />
-        <entry key="app/src/main/res/layout/unpair_device_fragment.xml" value="0.14629629629629629" />
-      </map>
-    </option>
-  </component>
-  <component name="ExternalStorageConfigurationManager" enabled="true" />
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" project-jdk-name="11" project-jdk-type="JavaSDK" />
-</project>
\ No newline at end of file

From d6ed527b20848db4eb20ec306006a7e2cb43b5d6 Mon Sep 17 00:00:00 2001
From: Joonhaeng Heo <jh.heo@lge.com>
Date: Tue, 20 Dec 2022 06:45:29 +0900
Subject: [PATCH 4/9] Add default value

---
 src/controller/DeviceUnpair.cpp | 7 +++----
 1 file changed, 3 insertions(+), 4 deletions(-)

diff --git a/src/controller/DeviceUnpair.cpp b/src/controller/DeviceUnpair.cpp
index 96dbb8fbc8086..0d1ae24df8575 100644
--- a/src/controller/DeviceUnpair.cpp
+++ b/src/controller/DeviceUnpair.cpp
@@ -144,9 +144,8 @@ void DeviceUnpair::OnDeviceConnectionFailureFn(void * context, const ScopedNodeI
 
 void DeviceUnpair::OnDone(app::ReadClient * apReadClient)
 {
-    FabricIndex fabricIndex;
-    CHIP_ERROR err = CHIP_NO_ERROR;
-    err            = mAttributeCache->ForEachAttribute(
+    FabricIndex fabricIndex = kUndefinedFabricIndex;
+    CHIP_ERROR err          = mAttributeCache->ForEachAttribute(
         OperationalCredentials::Id, [this, &fabricIndex](const app::ConcreteAttributePath & path) {
             if (path.mAttributeId != OperationalCredentials::Attributes::CurrentFabricIndex::Id)
             {
@@ -164,7 +163,7 @@ void DeviceUnpair::OnDone(app::ReadClient * apReadClient)
             }
         });
     mFabricIndex = fabricIndex;
-    PerformDeviceUnpairStep(mProxy, UnpairDeviceStage::kSendRemoveFabric, CHIP_NO_ERROR);
+    PerformDeviceUnpairStep(mProxy, UnpairDeviceStage::kSendRemoveFabric, err);
 }
 
 void DeviceUnpair::OnRemoveFabric(void * context, const OperationalCredentials::Commands::NOCResponse::DecodableType & data)

From 4acef9851929053c82658dbe20e9e303d1861aa0 Mon Sep 17 00:00:00 2001
From: Joonhaeng Heo <jh.heo@lge.com>
Date: Wed, 21 Dec 2022 16:34:14 +0900
Subject: [PATCH 5/9] Update from review

---
 src/controller/CHIPDeviceController.cpp |   1 +
 src/controller/DeviceUnpair.cpp         | 124 +++++++++++++-----------
 src/controller/DeviceUnpair.h           |  25 ++---
 3 files changed, 81 insertions(+), 69 deletions(-)

diff --git a/src/controller/CHIPDeviceController.cpp b/src/controller/CHIPDeviceController.cpp
index 33814ae7b312b..0f6a6c3f8eb04 100644
--- a/src/controller/CHIPDeviceController.cpp
+++ b/src/controller/CHIPDeviceController.cpp
@@ -896,6 +896,7 @@ CHIP_ERROR DeviceCommissioner::UnpairDevice(NodeId remoteDeviceId)
 {
     CHIP_ERROR err = CHIP_NO_ERROR;
     MATTER_TRACE_EVENT_SCOPE("UnpairDevice", "DeviceCommissioner");
+    VerifyOrReturnError(mDeviceUnpair == nullptr, CHIP_ERROR_INCORRECT_STATE);
 
     Platform::UniquePtr<DeviceUnpair> deviceUnpair(new DeviceUnpair());
     deviceUnpair->RegisterCallback(this);
diff --git a/src/controller/DeviceUnpair.cpp b/src/controller/DeviceUnpair.cpp
index 0d1ae24df8575..8377e62e523f5 100644
--- a/src/controller/DeviceUnpair.cpp
+++ b/src/controller/DeviceUnpair.cpp
@@ -19,10 +19,10 @@
 #include <controller/DeviceUnpair.h>
 
 #include <app-common/zap-generated/cluster-objects.h>
-#include <app/InteractionModelEngine.h>
 #include <controller-clusters/zap-generated/CHIPClusters.h>
 
 using namespace chip::app::Clusters;
+
 namespace chip {
 namespace Controller {
 
@@ -37,65 +37,66 @@ void DeviceUnpair::RegisterCallback(Callback * callback)
 void DeviceUnpair::UnpairDevice(DeviceProxy * proxy, NodeId remoteDeviceId)
 {
     mRemoteDeviceId = remoteDeviceId;
-    PerformDeviceUnpairStep(proxy, UnpairDeviceStage::kReadCurrentFabricIndex, CHIP_NO_ERROR);
+    RegisterDeviceProxy(proxy);
+    PerformDeviceUnpairStep(UnpairDeviceStage::kReadCurrentFabricIndex);
 }
 
-void DeviceUnpair::PerformDeviceUnpairStep(DeviceProxy * proxy, UnpairDeviceStage stage, CHIP_ERROR err)
+void DeviceUnpair::PerformDeviceUnpairStep(UnpairDeviceStage stage)
 {
-    mProxy = proxy;
+    if (mProxy == nullptr)
+    {
+        mLastError = CHIP_ERROR_INCORRECT_STATE;
+    }
+
+    if (mLastError != CHIP_NO_ERROR)
+    {
+        stage = UnpairDeviceStage::kUnpairError;
+    }
+
     mStage = stage;
 
     switch (stage)
     {
     case kReadCurrentFabricIndex: {
-        ReadCurrentFabricIndex(proxy);
+        ReadCurrentFabricIndex();
         break;
     }
     case kSendRemoveFabric: {
-        SendRemoveFabricIndex(proxy, mFabricIndex);
+        SendRemoveFabricIndex(mFabricIndex);
         break;
     }
     case kUnpairError:
     case kUnpairCleanUp:
     default: {
-        FinishUnpairDevice(err);
+        FinishUnpairDevice(mLastError);
         break;
     }
     }
 }
 
-void DeviceUnpair::ReadCurrentFabricIndex(DeviceProxy * proxy)
+void DeviceUnpair::ReadCurrentFabricIndex()
 {
-    app::InteractionModelEngine * engine = app::InteractionModelEngine::GetInstance();
-    app::ReadPrepareParams readParams(proxy->GetSecureSession().Value());
+    using TypeInfo = chip::app::Clusters::OperationalCredentials::Attributes::CurrentFabricIndex::TypeInfo;
+    OperationalCredentialsCluster cluster(*mProxy->GetExchangeManager(), mProxy->GetSecureSession().Value(), 0);
 
-    app::AttributePathParams readPaths[1];
-    readPaths[0] = app::AttributePathParams(OperationalCredentials::Id, OperationalCredentials::Attributes::CurrentFabricIndex::Id);
+    CHIP_ERROR err = cluster.ReadAttribute<TypeInfo>(this, OnSuccessCurrentFabricIndex, OnReadAttributeFailure);
 
-    readParams.mpAttributePathParamsList    = readPaths;
-    readParams.mAttributePathParamsListSize = 1;
-    readParams.mIsFabricFiltered            = false;
-
-    auto attributeCache = Platform::MakeUnique<app::ClusterStateCache>(*this);
-    auto readClient     = Platform::MakeUnique<app::ReadClient>(
-        engine, proxy->GetExchangeManager(), attributeCache->GetBufferedCallback(), app::ReadClient::InteractionType::Read);
-    CHIP_ERROR err = readClient->SendRequest(readParams);
     if (err != CHIP_NO_ERROR)
     {
-        ChipLogError(Controller, "Failed to send read request for networking clusters");
-        PerformDeviceUnpairStep(proxy, UnpairDeviceStage::kUnpairError, err);
+        SetLastError(err);
+        PerformDeviceUnpairStep(UnpairDeviceStage::kUnpairError);
         return;
     }
 
-    mAttributeCache = std::move(attributeCache);
-    mReadClient     = std::move(readClient);
+    return;
 }
 
-void DeviceUnpair::SendRemoveFabricIndex(DeviceProxy * proxy, FabricIndex fabricIndex)
+void DeviceUnpair::SendRemoveFabricIndex(FabricIndex fabricIndex)
 {
     if (fabricIndex == kUndefinedFabricIndex)
     {
-        PerformDeviceUnpairStep(nullptr, UnpairDeviceStage::kUnpairError, CHIP_ERROR_INVALID_FABRIC_INDEX);
+        SetLastError(CHIP_ERROR_INVALID_FABRIC_INDEX);
+        PerformDeviceUnpairStep(UnpairDeviceStage::kUnpairError);
         return;
     }
     ChipLogProgress(Controller, "SendRemoveFabricIndex : %u", fabricIndex);
@@ -103,15 +104,19 @@ void DeviceUnpair::SendRemoveFabricIndex(DeviceProxy * proxy, FabricIndex fabric
     OperationalCredentials::Commands::RemoveFabric::Type request;
     request.fabricIndex = fabricIndex;
 
-    OperationalCredentialsCluster cluster(*proxy->GetExchangeManager(), proxy->GetSecureSession().Value(), 0);
+    OperationalCredentialsCluster cluster(*mProxy->GetExchangeManager(), mProxy->GetSecureSession().Value(), 0);
 
-    cluster.InvokeCommand(request, this, OnRemoveFabric, OnCommandFailure);
+    CHIP_ERROR err = cluster.InvokeCommand(request, this, OnRemoveFabric, OnCommandFailure);
+    if (err != CHIP_NO_ERROR)
+    {
+        SetLastError(err);
+        PerformDeviceUnpairStep(UnpairDeviceStage::kUnpairError);
+        return;
+    }
 }
 
 void DeviceUnpair::FinishUnpairDevice(CHIP_ERROR err)
 {
-    mAttributeCache         = nullptr;
-    mReadClient             = nullptr;
     mProxy                  = nullptr;
     mOperationalDeviceProxy = nullptr;
 
@@ -121,15 +126,20 @@ void DeviceUnpair::FinishUnpairDevice(CHIP_ERROR err)
     }
 }
 
+void DeviceUnpair::GenerateOperationalDeviceProxy(Messaging::ExchangeManager & exchangeMgr, SessionHandle & sessionHandle)
+{
+    auto proxy              = Platform::MakeShared<OperationalDeviceProxy>(&exchangeMgr, sessionHandle);
+    mOperationalDeviceProxy = std::move(proxy);
+    RegisterDeviceProxy(mOperationalDeviceProxy.get());
+}
+
 void DeviceUnpair::OnDeviceConnectedFn(void * context, Messaging::ExchangeManager & exchangeMgr, SessionHandle & sessionHandle)
 {
     DeviceUnpair * deviceUnpair = static_cast<DeviceUnpair *>(context);
     VerifyOrReturn(deviceUnpair != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
 
-    auto proxy                            = Platform::MakeShared<OperationalDeviceProxy>(&exchangeMgr, sessionHandle);
-    deviceUnpair->mOperationalDeviceProxy = std::move(proxy);
-    deviceUnpair->PerformDeviceUnpairStep(deviceUnpair->mOperationalDeviceProxy.get(), UnpairDeviceStage::kReadCurrentFabricIndex,
-                                          CHIP_NO_ERROR);
+    deviceUnpair->GenerateOperationalDeviceProxy(exchangeMgr, sessionHandle);
+    deviceUnpair->PerformDeviceUnpairStep(UnpairDeviceStage::kReadCurrentFabricIndex);
 }
 
 void DeviceUnpair::OnDeviceConnectionFailureFn(void * context, const ScopedNodeId & peerId, CHIP_ERROR err)
@@ -139,31 +149,28 @@ void DeviceUnpair::OnDeviceConnectionFailureFn(void * context, const ScopedNodeI
     DeviceUnpair * deviceUnpair = static_cast<DeviceUnpair *>(context);
     VerifyOrReturn(deviceUnpair != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
 
-    deviceUnpair->PerformDeviceUnpairStep(nullptr, UnpairDeviceStage::kUnpairError, err);
+    deviceUnpair->SetLastError(err);
+    deviceUnpair->PerformDeviceUnpairStep(UnpairDeviceStage::kUnpairError);
 }
 
-void DeviceUnpair::OnDone(app::ReadClient * apReadClient)
+void DeviceUnpair::OnSuccessCurrentFabricIndex(void * context, uint8_t fabricIndex)
 {
-    FabricIndex fabricIndex = kUndefinedFabricIndex;
-    CHIP_ERROR err          = mAttributeCache->ForEachAttribute(
-        OperationalCredentials::Id, [this, &fabricIndex](const app::ConcreteAttributePath & path) {
-            if (path.mAttributeId != OperationalCredentials::Attributes::CurrentFabricIndex::Id)
-            {
-                // Continue on
-                return CHIP_NO_ERROR;
-            }
-
-            switch (path.mAttributeId)
-            {
-            case OperationalCredentials::Attributes::CurrentFabricIndex::Id:
-                return this->mAttributeCache->Get<OperationalCredentials::Attributes::CurrentFabricIndex::TypeInfo>(path,
-                                                                                                                    fabricIndex);
-            default:
-                return CHIP_NO_ERROR;
-            }
-        });
-    mFabricIndex = fabricIndex;
-    PerformDeviceUnpairStep(mProxy, UnpairDeviceStage::kSendRemoveFabric, err);
+    DeviceUnpair * deviceUnpair = static_cast<DeviceUnpair *>(context);
+    VerifyOrReturn(deviceUnpair != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
+    deviceUnpair->mFabricIndex = fabricIndex;
+
+    deviceUnpair->PerformDeviceUnpairStep(UnpairDeviceStage::kSendRemoveFabric);
+}
+
+void DeviceUnpair::OnReadAttributeFailure(void * context, CHIP_ERROR err)
+{
+    ChipLogProgress(Controller, "OnCommandFailure %s", err.AsString());
+
+    DeviceUnpair * deviceUnpair = static_cast<DeviceUnpair *>(context);
+    VerifyOrReturn(deviceUnpair != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
+
+    deviceUnpair->SetLastError(err);
+    deviceUnpair->PerformDeviceUnpairStep(UnpairDeviceStage::kUnpairError);
 }
 
 void DeviceUnpair::OnRemoveFabric(void * context, const OperationalCredentials::Commands::NOCResponse::DecodableType & data)
@@ -171,7 +178,7 @@ void DeviceUnpair::OnRemoveFabric(void * context, const OperationalCredentials::
     DeviceUnpair * deviceUnpair = static_cast<DeviceUnpair *>(context);
     VerifyOrReturn(deviceUnpair != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
 
-    deviceUnpair->PerformDeviceUnpairStep(nullptr, UnpairDeviceStage::kUnpairCleanUp, CHIP_NO_ERROR);
+    deviceUnpair->PerformDeviceUnpairStep(UnpairDeviceStage::kUnpairCleanUp);
 }
 
 void DeviceUnpair::OnCommandFailure(void * context, CHIP_ERROR err)
@@ -181,7 +188,8 @@ void DeviceUnpair::OnCommandFailure(void * context, CHIP_ERROR err)
     DeviceUnpair * deviceUnpair = static_cast<DeviceUnpair *>(context);
     VerifyOrReturn(deviceUnpair != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
 
-    deviceUnpair->PerformDeviceUnpairStep(nullptr, UnpairDeviceStage::kUnpairError, err);
+    deviceUnpair->SetLastError(err);
+    deviceUnpair->PerformDeviceUnpairStep(UnpairDeviceStage::kUnpairError);
 }
 } // namespace Controller
 } // namespace chip
diff --git a/src/controller/DeviceUnpair.h b/src/controller/DeviceUnpair.h
index 3d50772047b6f..38667626cb792 100644
--- a/src/controller/DeviceUnpair.h
+++ b/src/controller/DeviceUnpair.h
@@ -18,7 +18,6 @@
 
 #pragma once
 
-#include <app/ClusterStateCache.h>
 #include <app/OperationalSessionSetup.h>
 #include <lib/core/CHIPCallback.h>
 
@@ -33,7 +32,7 @@ enum UnpairDeviceStage : uint8_t
     kUnpairCleanUp,
 };
 
-class DLL_EXPORT DeviceUnpair : public app::ClusterStateCache::Callback
+class DLL_EXPORT DeviceUnpair
 {
 public:
     class Callback
@@ -50,31 +49,35 @@ class DLL_EXPORT DeviceUnpair : public app::ClusterStateCache::Callback
     void UnpairDevice(DeviceProxy * proxy, NodeId remoteDeviceId);
 
 private:
-    Callback * mCallback = nullptr;
+    CHIP_ERROR mLastError = CHIP_NO_ERROR;
+    Callback * mCallback  = nullptr;
 
     chip::Callback::Callback<OnDeviceConnected> mOnDeviceConnectedCallback;
     chip::Callback::Callback<OnDeviceConnectionFailure> mOnDeviceConnectionFailureCallback;
 
-    Platform::UniquePtr<app::ClusterStateCache> mAttributeCache;
-    Platform::UniquePtr<app::ReadClient> mReadClient;
-
     DeviceProxy * mProxy = nullptr;
     Platform::SharedPtr<OperationalDeviceProxy> mOperationalDeviceProxy;
     NodeId mRemoteDeviceId;
     FabricIndex mFabricIndex = kUndefinedFabricIndex;
     UnpairDeviceStage mStage = UnpairDeviceStage::kUnpairError;
 
-    void PerformDeviceUnpairStep(DeviceProxy * proxy, UnpairDeviceStage stage, CHIP_ERROR err);
+    void RegisterDeviceProxy(DeviceProxy * proxy) { mProxy = proxy; }
+    void SetLastError(CHIP_ERROR err) { mLastError = err; }
 
-    void ReadCurrentFabricIndex(DeviceProxy * proxy);
-    void SendRemoveFabricIndex(DeviceProxy * proxy, FabricIndex fabricIndex);
-    void FinishUnpairDevice(CHIP_ERROR err);
+    void GenerateOperationalDeviceProxy(Messaging::ExchangeManager & exchangeMgr, SessionHandle & sessionHandle);
 
-    void OnDone(app::ReadClient * apReadClient);
+    void PerformDeviceUnpairStep(UnpairDeviceStage stage);
+
+    void ReadCurrentFabricIndex();
+    void SendRemoveFabricIndex(FabricIndex fabricIndex);
+    void FinishUnpairDevice(CHIP_ERROR err);
 
     static void OnDeviceConnectedFn(void * context, Messaging::ExchangeManager & exchangeMgr, SessionHandle & sessionHandle);
     static void OnDeviceConnectionFailureFn(void * context, const ScopedNodeId & peerId, CHIP_ERROR error);
 
+    static void OnSuccessCurrentFabricIndex(void * context, uint8_t fabricIndex);
+    static void OnReadAttributeFailure(void * context, CHIP_ERROR error);
+
     static void OnRemoveFabric(void * context,
                                const chip::app::Clusters::OperationalCredentials::Commands::NOCResponse::DecodableType & data);
 

From 2f2312e5046c7da1c0e5a461189bc56399a79263 Mon Sep 17 00:00:00 2001
From: Joonhaeng Heo <jh.heo@lge.com>
Date: Thu, 22 Dec 2022 15:54:02 +0900
Subject: [PATCH 6/9] Modify from reviewer comments

---
 .../provisioning/UnpairDeviceFragment.kt      |  18 +-
 .../commands/pairing/PairingCommand.cpp       |  21 +-
 .../commands/pairing/PairingCommand.h         |   9 +-
 src/controller/BUILD.gn                       |   4 +-
 src/controller/CHIPDeviceController.cpp       |  24 +--
 src/controller/CHIPDeviceController.h         |   9 +-
 src/controller/CurrentFabricRemover.cpp       | 190 +++++++++++++++++
 src/controller/CurrentFabricRemover.h         | 107 ++++++++++
 src/controller/DeviceUnpair.cpp               | 195 ------------------
 src/controller/DeviceUnpair.h                 |  95 ---------
 .../java/AndroidCurrentFabricRemover.cpp      | 103 +++++++++
 .../java/AndroidCurrentFabricRemover.h        |  49 +++++
 src/controller/java/BUILD.gn                  |   3 +
 .../java/CHIPDeviceController-JNI.cpp         |  18 ++
 .../ChipDeviceController.java                 |   7 +
 .../UnpairDeviceCallback.java                 |  24 +++
 16 files changed, 546 insertions(+), 330 deletions(-)
 create mode 100644 src/controller/CurrentFabricRemover.cpp
 create mode 100644 src/controller/CurrentFabricRemover.h
 delete mode 100644 src/controller/DeviceUnpair.cpp
 delete mode 100644 src/controller/DeviceUnpair.h
 create mode 100644 src/controller/java/AndroidCurrentFabricRemover.cpp
 create mode 100644 src/controller/java/AndroidCurrentFabricRemover.h
 create mode 100644 src/controller/java/src/chip/devicecontroller/UnpairDeviceCallback.java

diff --git a/examples/android/CHIPTool/app/src/main/java/com/google/chip/chiptool/provisioning/UnpairDeviceFragment.kt b/examples/android/CHIPTool/app/src/main/java/com/google/chip/chiptool/provisioning/UnpairDeviceFragment.kt
index 5194f8d3e8361..801d4fc127283 100644
--- a/examples/android/CHIPTool/app/src/main/java/com/google/chip/chiptool/provisioning/UnpairDeviceFragment.kt
+++ b/examples/android/CHIPTool/app/src/main/java/com/google/chip/chiptool/provisioning/UnpairDeviceFragment.kt
@@ -7,11 +7,9 @@ import android.view.View
 import android.view.ViewGroup
 import androidx.fragment.app.Fragment
 import androidx.lifecycle.lifecycleScope
-import chip.devicecontroller.ChipClusters
 import chip.devicecontroller.ChipDeviceController
-import chip.devicecontroller.OpenCommissioningCallback
+import chip.devicecontroller.UnpairDeviceCallback
 import com.google.chip.chiptool.ChipClient
-import com.google.chip.chiptool.GenericChipDeviceListener
 import com.google.chip.chiptool.R
 import com.google.chip.chiptool.clusterclient.AddressUpdateFragment
 import kotlinx.android.synthetic.main.unpair_device_fragment.view.unpairDeviceBtn
@@ -33,8 +31,6 @@ class UnpairDeviceFragment : Fragment() {
     scope = viewLifecycleOwner.lifecycleScope
 
     return inflater.inflate(R.layout.unpair_device_fragment, container, false).apply {
-      deviceController.setCompletionListener(ChipControllerCallback())
-
       addressUpdateFragment =
         childFragmentManager.findFragmentById(R.id.addressUpdateFragment) as AddressUpdateFragment
 
@@ -42,14 +38,18 @@ class UnpairDeviceFragment : Fragment() {
     }
   }
 
-  inner class ChipControllerCallback : GenericChipDeviceListener() {
-    override fun onPairingDeleted(code: Int) {
-      Log.d(TAG, "onPairingDeleted : $code")
+  inner class ChipUnpairDeviceCallback : UnpairDeviceCallback {
+    override fun onError(status: Int, remoteDeviceId: Long) {
+      Log.d(TAG, "onError : $remoteDeviceId, $status")
+    }
+
+    override fun onSuccess(remoteDeviceId: Long) {
+      Log.d(TAG, "onSuccess : $remoteDeviceId")
     }
   }
 
   private  fun unpairDeviceClick() {
-    deviceController.unpairDevice(addressUpdateFragment.deviceId)
+    deviceController.unpairDeviceCallback(addressUpdateFragment.deviceId, ChipUnpairDeviceCallback())
   }
 
 
diff --git a/examples/chip-tool/commands/pairing/PairingCommand.cpp b/examples/chip-tool/commands/pairing/PairingCommand.cpp
index 91a4a6ced4dc5..e80b11c7d2252 100644
--- a/examples/chip-tool/commands/pairing/PairingCommand.cpp
+++ b/examples/chip-tool/commands/pairing/PairingCommand.cpp
@@ -161,8 +161,8 @@ CHIP_ERROR PairingCommand::PairWithMdns(NodeId remoteId)
 
 CHIP_ERROR PairingCommand::Unpair(NodeId remoteId)
 {
-    CHIP_ERROR err = CurrentCommissioner().UnpairDevice(remoteId);
-    return err;
+    mCurrentFabricRemover = Platform::MakeUnique<Controller::CurrentFabricRemover>(&CurrentCommissioner());
+    return mCurrentFabricRemover->CurrentFabricRemove(remoteId, &mCurrentFabricRemoveCallback);
 }
 
 void PairingCommand::OnStatusUpdate(DevicePairingDelegate::Status status)
@@ -264,3 +264,20 @@ void PairingCommand::OnDiscoveredDevice(const chip::Dnssd::DiscoveredNodeData &
         SetCommandExitStatus(err);
     }
 }
+
+void PairingCommand::OnCurrentFabricRemove(void * context, NodeId remoteDeviceId, CHIP_ERROR err)
+{
+    PairingCommand * command = reinterpret_cast<PairingCommand *>(context);
+    VerifyOrReturn(command != nullptr, ChipLogError(chipTool, "OnOpenCommissioningWindowCommand: context is null"));
+
+    if (err == CHIP_NO_ERROR)
+    {
+        ChipLogProgress(chipTool, "Device unpair completed with success: " ChipLogFormatX64, ChipLogValueX64(remoteDeviceId));
+    }
+    else
+    {
+        ChipLogProgress(chipTool, "Device unpair Failure: " ChipLogFormatX64 " %s", ChipLogValueX64(remoteDeviceId), ErrorStr(err));
+    }
+
+    command->SetCommandExitStatus(err);
+}
diff --git a/examples/chip-tool/commands/pairing/PairingCommand.h b/examples/chip-tool/commands/pairing/PairingCommand.h
index 3edd1cfd9e3f4..2fd6f1acac7a0 100644
--- a/examples/chip-tool/commands/pairing/PairingCommand.h
+++ b/examples/chip-tool/commands/pairing/PairingCommand.h
@@ -55,7 +55,8 @@ class PairingCommand : public CHIPCommand,
                    chip::Dnssd::DiscoveryFilterType filterType = chip::Dnssd::DiscoveryFilterType::kNone) :
         CHIPCommand(commandName, credIssuerCmds),
         mPairingMode(mode), mNetworkType(networkType),
-        mFilterType(filterType), mRemoteAddr{ IPAddress::Any, chip::Inet::InterfaceId::Null() }
+        mFilterType(filterType), mRemoteAddr{ IPAddress::Any, chip::Inet::InterfaceId::Null() },
+        mCurrentFabricRemoveCallback(OnCurrentFabricRemove, this)
     {
         AddArgument("node-id", 0, UINT64_MAX, &mNodeId);
 
@@ -184,4 +185,10 @@ class PairingCommand : public CHIPCommand,
     char * mOnboardingPayload;
     uint64_t mDiscoveryFilterCode;
     char * mDiscoveryFilterInstanceName;
+
+    // For unpair
+    chip::Platform::UniquePtr<chip::Controller::CurrentFabricRemover> mCurrentFabricRemover;
+    chip::Callback::Callback<chip::Controller::OnCurrentFabricRemove> mCurrentFabricRemoveCallback;
+
+    static void OnCurrentFabricRemove(void * context, NodeId remoteDeviceId, CHIP_ERROR status);
 };
diff --git a/src/controller/BUILD.gn b/src/controller/BUILD.gn
index fb9d00ff1009a..cdb5726c338d5 100644
--- a/src/controller/BUILD.gn
+++ b/src/controller/BUILD.gn
@@ -46,10 +46,10 @@ static_library("controller") {
       "CommissioningDelegate.cpp",
       "CommissioningWindowOpener.cpp",
       "CommissioningWindowOpener.h",
+      "CurrentFabricRemover.cpp",
+      "CurrentFabricRemover.h",
       "DeviceDiscoveryDelegate.h",
       "DevicePairingDelegate.h",
-      "DeviceUnpair.cpp",
-      "DeviceUnpair.h",
       "EmptyDataModelHandler.cpp",
       "ExampleOperationalCredentialsIssuer.cpp",
       "ExampleOperationalCredentialsIssuer.h",
diff --git a/src/controller/CHIPDeviceController.cpp b/src/controller/CHIPDeviceController.cpp
index 0f6a6c3f8eb04..02b6c3f9fe477 100644
--- a/src/controller/CHIPDeviceController.cpp
+++ b/src/controller/CHIPDeviceController.cpp
@@ -896,35 +896,19 @@ CHIP_ERROR DeviceCommissioner::UnpairDevice(NodeId remoteDeviceId)
 {
     CHIP_ERROR err = CHIP_NO_ERROR;
     MATTER_TRACE_EVENT_SCOPE("UnpairDevice", "DeviceCommissioner");
-    VerifyOrReturnError(mDeviceUnpair == nullptr, CHIP_ERROR_INCORRECT_STATE);
 
-    Platform::UniquePtr<DeviceUnpair> deviceUnpair(new DeviceUnpair());
-    deviceUnpair->RegisterCallback(this);
-    CommissioneeDeviceProxy * commissioneeDeviceProxy = nullptr;
-    if (CHIP_NO_ERROR == GetDeviceBeingCommissioned(remoteDeviceId, &commissioneeDeviceProxy))
+    if (mState == State::Initialized)
     {
-        deviceUnpair->UnpairDevice(commissioneeDeviceProxy, remoteDeviceId);
+        err = AutoCurrentFabricRemover::RemoveCurrentFabric(this, remoteDeviceId);
     }
-    else
+    else // the device is currently being paired
     {
-        err = GetConnectedDevice(remoteDeviceId, &deviceUnpair->GetConnectedCallback(),
-                                 &deviceUnpair->GetConnectionFailureCallback());
+        err = StopPairing(remoteDeviceId);
     }
 
-    mDeviceUnpair = std::move(deviceUnpair);
-
     return err;
 }
 
-void DeviceCommissioner::OnDeviceUnpair(NodeId remoteDeviceId, CHIP_ERROR err)
-{
-    mDeviceUnpair = nullptr;
-    if (mPairingDelegate != nullptr)
-    {
-        mPairingDelegate->OnPairingDeleted(err);
-    }
-}
-
 void DeviceCommissioner::RendezvousCleanup(CHIP_ERROR status)
 {
     if (mDeviceInPASEEstablishment != nullptr)
diff --git a/src/controller/CHIPDeviceController.h b/src/controller/CHIPDeviceController.h
index f15bfb652ff21..758e72f1a3873 100644
--- a/src/controller/CHIPDeviceController.h
+++ b/src/controller/CHIPDeviceController.h
@@ -39,8 +39,8 @@
 #include <controller/CHIPDeviceControllerSystemState.h>
 #include <controller/CommissioneeDeviceProxy.h>
 #include <controller/CommissioningDelegate.h>
+#include <controller/CurrentFabricRemover.h>
 #include <controller/DevicePairingDelegate.h>
-#include <controller/DeviceUnpair.h>
 #include <controller/OperationalCredentialsDelegate.h>
 #include <controller/SetUpCodePairer.h>
 #include <credentials/FabricTable.h>
@@ -371,8 +371,7 @@ class DLL_EXPORT DeviceCommissioner : public DeviceController,
                                       public Protocols::UserDirectedCommissioning::InstanceNameResolver,
 #endif
                                       public SessionEstablishmentDelegate,
-                                      public app::ClusterStateCache::Callback,
-                                      public DeviceUnpair::Callback
+                                      public app::ClusterStateCache::Callback
 {
 public:
     DeviceCommissioner();
@@ -532,8 +531,6 @@ class DLL_EXPORT DeviceCommissioner : public DeviceController,
      */
     CHIP_ERROR UnpairDevice(NodeId remoteDeviceId);
 
-    void OnDeviceUnpair(NodeId remoteDeviceId, CHIP_ERROR err) override;
-
     //////////// SessionEstablishmentDelegate Implementation ///////////////
     void OnSessionEstablishmentError(CHIP_ERROR error) override;
     void OnSessionEstablished(const SessionHandle & session) override;
@@ -917,7 +914,7 @@ class DLL_EXPORT DeviceCommissioner : public DeviceController,
     Platform::UniquePtr<Credentials::DeviceAttestationVerifier::AttestationDeviceInfo> mAttestationDeviceInfo;
     Credentials::DeviceAttestationVerifier * mDeviceAttestationVerifier = nullptr;
 
-    Platform::UniquePtr<DeviceUnpair> mDeviceUnpair;
+    // Platform::UniquePtr<DeviceUnpair> mDeviceUnpair;
 };
 
 } // namespace Controller
diff --git a/src/controller/CurrentFabricRemover.cpp b/src/controller/CurrentFabricRemover.cpp
new file mode 100644
index 0000000000000..2e5f04b69e40f
--- /dev/null
+++ b/src/controller/CurrentFabricRemover.cpp
@@ -0,0 +1,190 @@
+/*
+ *
+ *    Copyright (c) 2021 Project CHIP Authors
+ *    All rights reserved.
+ *
+ *    Licensed under the Apache License, Version 2.0 (the "License");
+ *    you may not use this file except in compliance with the License.
+ *    You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *    Unless required by applicable law or agreed to in writing, software
+ *    distributed under the License is distributed on an "AS IS" BASIS,
+ *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *    See the License for the specific language governing permissions and
+ *    limitations under the License.
+ */
+
+#include <controller/CurrentFabricRemover.h>
+
+#include <app-common/zap-generated/cluster-objects.h>
+#include <controller-clusters/zap-generated/CHIPClusters.h>
+
+using namespace chip::app::Clusters;
+
+namespace chip {
+namespace Controller {
+
+CHIP_ERROR CurrentFabricRemover::CurrentFabricRemove(NodeId remoteDeviceId, Callback::Callback<OnCurrentFabricRemove> * callback)
+{
+    mRemoteDeviceId              = remoteDeviceId;
+    mCurrentFabricRemoveCallback = callback;
+    mNextStep                    = Step::kReadCurrentFabricIndex;
+
+    return mCommissioner->GetConnectedDevice(remoteDeviceId, &mOnDeviceConnectedCallback, &mOnDeviceConnectionFailureCallback);
+}
+
+CHIP_ERROR CurrentFabricRemover::ReadCurrentFabricIndex(Messaging::ExchangeManager & exchangeMgr, SessionHandle & sessionHandle)
+{
+    using TypeInfo = chip::app::Clusters::OperationalCredentials::Attributes::CurrentFabricIndex::TypeInfo;
+    OperationalCredentialsCluster cluster(exchangeMgr, sessionHandle, kRootEndpointId);
+
+    return cluster.ReadAttribute<TypeInfo>(this, OnSuccessReadCurrentFabricIndex, OnReadAttributeFailure);
+}
+
+CHIP_ERROR CurrentFabricRemover::SendRemoveFabricIndex(Messaging::ExchangeManager & exchangeMgr, SessionHandle & sessionHandle)
+{
+    if (mFabricIndex == kUndefinedFabricIndex)
+    {
+        return CHIP_ERROR_INVALID_FABRIC_INDEX;
+    }
+    ChipLogProgress(Controller, "SendRemoveFabricIndex : %u", mFabricIndex);
+
+    OperationalCredentials::Commands::RemoveFabric::Type request;
+    request.fabricIndex = mFabricIndex;
+
+    OperationalCredentialsCluster cluster(exchangeMgr, sessionHandle, 0);
+
+    return cluster.InvokeCommand(request, this, OnSuccessRemoveFabric, OnCommandFailure);
+}
+
+void CurrentFabricRemover::OnDeviceConnectedFn(void * context, Messaging::ExchangeManager & exchangeMgr,
+                                               SessionHandle & sessionHandle)
+{
+    CHIP_ERROR err = CHIP_NO_ERROR;
+    auto * self    = static_cast<CurrentFabricRemover *>(context);
+    VerifyOrReturn(self != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
+
+    switch (self->mNextStep)
+    {
+    case Step::kReadCurrentFabricIndex: {
+        err = self->ReadCurrentFabricIndex(exchangeMgr, sessionHandle);
+        break;
+    }
+    case Step::kSendRemoveFabric: {
+        err = self->SendRemoveFabricIndex(exchangeMgr, sessionHandle);
+        break;
+    }
+    default:
+        err = CHIP_ERROR_INCORRECT_STATE;
+        break;
+    }
+
+    if (err != CHIP_NO_ERROR)
+    {
+        ChipLogError(Controller, "%" CHIP_ERROR_FORMAT, err.Format());
+        FinishRemoveCurrentFabric(context, err);
+    }
+
+    return;
+}
+
+void CurrentFabricRemover::OnDeviceConnectionFailureFn(void * context, const ScopedNodeId & peerId, CHIP_ERROR err)
+{
+    ChipLogProgress(Controller, "OnDeviceConnectionFailureFn: %s", err.AsString());
+
+    auto * self = static_cast<CurrentFabricRemover *>(context);
+    VerifyOrReturn(self != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
+
+    FinishRemoveCurrentFabric(context, err);
+    return;
+}
+
+void CurrentFabricRemover::OnSuccessReadCurrentFabricIndex(void * context, uint8_t fabricIndex)
+{
+    auto * self = static_cast<CurrentFabricRemover *>(context);
+    VerifyOrReturn(self != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
+    self->mFabricIndex = fabricIndex;
+    self->mNextStep    = Step::kSendRemoveFabric;
+    CHIP_ERROR err     = self->mCommissioner->GetConnectedDevice(self->mRemoteDeviceId, &self->mOnDeviceConnectedCallback,
+                                                             &self->mOnDeviceConnectionFailureCallback);
+    if (err != CHIP_NO_ERROR)
+    {
+        FinishRemoveCurrentFabric(context, err);
+    }
+    return;
+}
+
+void CurrentFabricRemover::OnReadAttributeFailure(void * context, CHIP_ERROR err)
+{
+    ChipLogProgress(Controller, "OnReadAttributeFailure %s", err.AsString());
+
+    auto * self = static_cast<CurrentFabricRemover *>(context);
+    VerifyOrReturn(self != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
+
+    FinishRemoveCurrentFabric(context, err);
+    return;
+}
+
+void CurrentFabricRemover::OnSuccessRemoveFabric(void * context,
+                                                 const OperationalCredentials::Commands::NOCResponse::DecodableType & data)
+{
+    auto * self = static_cast<CurrentFabricRemover *>(context);
+    VerifyOrReturn(self != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
+
+    FinishRemoveCurrentFabric(context, CHIP_NO_ERROR);
+    return;
+}
+
+void CurrentFabricRemover::OnCommandFailure(void * context, CHIP_ERROR err)
+{
+    ChipLogProgress(Controller, "OnCommandFailure %s", err.AsString());
+
+    auto * self = static_cast<CurrentFabricRemover *>(context);
+    VerifyOrReturn(self != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
+
+    FinishRemoveCurrentFabric(context, err);
+    return;
+}
+
+void CurrentFabricRemover::FinishRemoveCurrentFabric(void * context, CHIP_ERROR err)
+{
+    ChipLogError(Controller, "Remove Current Fabric Result : %" CHIP_ERROR_FORMAT, err.Format());
+    auto * self     = static_cast<CurrentFabricRemover *>(context);
+    self->mNextStep = Step::kAcceptRemoveFabricStart;
+    if (self->mCurrentFabricRemoveCallback != nullptr)
+    {
+        self->mCurrentFabricRemoveCallback->mCall(self->mCurrentFabricRemoveCallback->mContext, self->mRemoteDeviceId, err);
+    }
+}
+
+AutoCurrentFabricRemover::AutoCurrentFabricRemover(DeviceCommissioner * commissioner) :
+    CurrentFabricRemover(commissioner), mOnRemoveCurrentFabricCallback(OnRemoveCurrentFabric, this)
+{}
+
+CHIP_ERROR AutoCurrentFabricRemover::RemoveCurrentFabric(DeviceCommissioner * commissoner, NodeId remoteDeviceId)
+{
+    // Not using Platform::New because we want to keep our constructor private.
+    auto * remover = new (std::nothrow) AutoCurrentFabricRemover(commissoner);
+    if (remover == nullptr)
+    {
+        return CHIP_ERROR_NO_MEMORY;
+    }
+
+    CHIP_ERROR err = remover->CurrentFabricRemover::CurrentFabricRemove(remoteDeviceId, &remover->mOnRemoveCurrentFabricCallback);
+    if (err != CHIP_NO_ERROR)
+    {
+        delete remover;
+    }
+    // Else will clean up when the callback is called.
+    return err;
+}
+
+void AutoCurrentFabricRemover::OnRemoveCurrentFabric(void * context, NodeId remoteDeviceId, CHIP_ERROR status)
+{
+    auto * self = static_cast<AutoCurrentFabricRemover *>(context);
+    delete self;
+}
+} // namespace Controller
+} // namespace chip
diff --git a/src/controller/CurrentFabricRemover.h b/src/controller/CurrentFabricRemover.h
new file mode 100644
index 0000000000000..a9f2c7cd72b11
--- /dev/null
+++ b/src/controller/CurrentFabricRemover.h
@@ -0,0 +1,107 @@
+/*
+ *
+ *    Copyright (c) 2021 Project CHIP Authors
+ *    All rights reserved.
+ *
+ *    Licensed under the Apache License, Version 2.0 (the "License");
+ *    you may not use this file except in compliance with the License.
+ *    You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *    Unless required by applicable law or agreed to in writing, software
+ *    distributed under the License is distributed on an "AS IS" BASIS,
+ *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *    See the License for the specific language governing permissions and
+ *    limitations under the License.
+ */
+
+#pragma once
+
+#include <app/OperationalSessionSetup.h>
+#include <controller/CHIPDeviceController.h>
+#include <lib/core/CHIPCallback.h>
+
+namespace chip {
+namespace Controller {
+
+typedef void (*OnCurrentFabricRemove)(void * context, NodeId remoteDeviceId, CHIP_ERROR status);
+
+/**
+ * A helper class to remove fabric given some parameters.
+ */
+class CurrentFabricRemover
+{
+public:
+    CurrentFabricRemover(DeviceCommissioner * commissioner) :
+        mCommissioner(commissioner), mOnDeviceConnectedCallback(&OnDeviceConnectedFn, this),
+        mOnDeviceConnectionFailureCallback(&OnDeviceConnectionFailureFn, this)
+    {}
+
+    enum class Step : uint8_t
+    {
+        // Ready to start removing a fabric.
+        kAcceptRemoveFabricStart = 0,
+        // Need to get Current Fabric Index.
+        kReadCurrentFabricIndex,
+        // Need to send Remove Fabric Command.
+        kSendRemoveFabric,
+    };
+
+    /*
+     * @brief
+     *   Try to look up the device attached to our controller with the given
+     *   remote device id and ask it to remove Fabric.
+     *
+     * @param[in] remoteDeviceId The remote device Id
+     * @param[in] callback The callback to call once the remote fabric is completed or not.
+     */
+    CHIP_ERROR CurrentFabricRemove(NodeId remoteDeviceId, Callback::Callback<OnCurrentFabricRemove> * callback);
+
+private:
+    DeviceCommissioner * mCommissioner;
+
+    chip::Callback::Callback<OnDeviceConnected> mOnDeviceConnectedCallback;
+    chip::Callback::Callback<OnDeviceConnectionFailure> mOnDeviceConnectionFailureCallback;
+    chip::Callback::Callback<OnCurrentFabricRemove> * mCurrentFabricRemoveCallback;
+
+    NodeId mRemoteDeviceId;
+    FabricIndex mFabricIndex = kUndefinedFabricIndex;
+    Step mNextStep           = Step::kAcceptRemoveFabricStart;
+
+    CHIP_ERROR ReadCurrentFabricIndex(Messaging::ExchangeManager & exchangeMgr, SessionHandle & sessionHandle);
+    CHIP_ERROR SendRemoveFabricIndex(Messaging::ExchangeManager & exchangeMgr, SessionHandle & sessionHandle);
+
+    static void OnDeviceConnectedFn(void * context, Messaging::ExchangeManager & exchangeMgr, SessionHandle & sessionHandle);
+    static void OnDeviceConnectionFailureFn(void * context, const ScopedNodeId & peerId, CHIP_ERROR error);
+
+    static void OnSuccessReadCurrentFabricIndex(void * context, uint8_t fabricIndex);
+    static void OnReadAttributeFailure(void * context, CHIP_ERROR error);
+
+    static void
+    OnSuccessRemoveFabric(void * context,
+                          const chip::app::Clusters::OperationalCredentials::Commands::NOCResponse::DecodableType & data);
+    static void OnCommandFailure(void * context, CHIP_ERROR error);
+
+    static void FinishRemoveCurrentFabric(void * context, CHIP_ERROR err);
+};
+
+/**
+ * A helper class that can be used by consumers that don't care about the callback from the
+ * remove fabric process and just want automatic cleanup of the CurrentFabricRemover when done
+ * with it.
+ */
+class AutoCurrentFabricRemover : private CurrentFabricRemover
+{
+public:
+    // Takes the same arguments as CurrentFabricRemover::RemoveCurrentFabric except without the callback.
+    static CHIP_ERROR RemoveCurrentFabric(DeviceCommissioner * commissoner, NodeId remoteDeviceId);
+
+private:
+    AutoCurrentFabricRemover(DeviceCommissioner * commissioner);
+    static void OnRemoveCurrentFabric(void * context, NodeId remoteDeviceId, CHIP_ERROR status);
+    chip::Callback::Callback<OnCurrentFabricRemove> mOnRemoveCurrentFabricCallback;
+};
+
+} // namespace Controller
+} // namespace chip
diff --git a/src/controller/DeviceUnpair.cpp b/src/controller/DeviceUnpair.cpp
deleted file mode 100644
index 8377e62e523f5..0000000000000
--- a/src/controller/DeviceUnpair.cpp
+++ /dev/null
@@ -1,195 +0,0 @@
-/*
- *
- *    Copyright (c) 2021 Project CHIP Authors
- *    All rights reserved.
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-#include <controller/DeviceUnpair.h>
-
-#include <app-common/zap-generated/cluster-objects.h>
-#include <controller-clusters/zap-generated/CHIPClusters.h>
-
-using namespace chip::app::Clusters;
-
-namespace chip {
-namespace Controller {
-
-DeviceUnpair::DeviceUnpair() :
-    mOnDeviceConnectedCallback(OnDeviceConnectedFn, this), mOnDeviceConnectionFailureCallback(OnDeviceConnectionFailureFn, this)
-{}
-
-void DeviceUnpair::RegisterCallback(Callback * callback)
-{
-    mCallback = callback;
-}
-void DeviceUnpair::UnpairDevice(DeviceProxy * proxy, NodeId remoteDeviceId)
-{
-    mRemoteDeviceId = remoteDeviceId;
-    RegisterDeviceProxy(proxy);
-    PerformDeviceUnpairStep(UnpairDeviceStage::kReadCurrentFabricIndex);
-}
-
-void DeviceUnpair::PerformDeviceUnpairStep(UnpairDeviceStage stage)
-{
-    if (mProxy == nullptr)
-    {
-        mLastError = CHIP_ERROR_INCORRECT_STATE;
-    }
-
-    if (mLastError != CHIP_NO_ERROR)
-    {
-        stage = UnpairDeviceStage::kUnpairError;
-    }
-
-    mStage = stage;
-
-    switch (stage)
-    {
-    case kReadCurrentFabricIndex: {
-        ReadCurrentFabricIndex();
-        break;
-    }
-    case kSendRemoveFabric: {
-        SendRemoveFabricIndex(mFabricIndex);
-        break;
-    }
-    case kUnpairError:
-    case kUnpairCleanUp:
-    default: {
-        FinishUnpairDevice(mLastError);
-        break;
-    }
-    }
-}
-
-void DeviceUnpair::ReadCurrentFabricIndex()
-{
-    using TypeInfo = chip::app::Clusters::OperationalCredentials::Attributes::CurrentFabricIndex::TypeInfo;
-    OperationalCredentialsCluster cluster(*mProxy->GetExchangeManager(), mProxy->GetSecureSession().Value(), 0);
-
-    CHIP_ERROR err = cluster.ReadAttribute<TypeInfo>(this, OnSuccessCurrentFabricIndex, OnReadAttributeFailure);
-
-    if (err != CHIP_NO_ERROR)
-    {
-        SetLastError(err);
-        PerformDeviceUnpairStep(UnpairDeviceStage::kUnpairError);
-        return;
-    }
-
-    return;
-}
-
-void DeviceUnpair::SendRemoveFabricIndex(FabricIndex fabricIndex)
-{
-    if (fabricIndex == kUndefinedFabricIndex)
-    {
-        SetLastError(CHIP_ERROR_INVALID_FABRIC_INDEX);
-        PerformDeviceUnpairStep(UnpairDeviceStage::kUnpairError);
-        return;
-    }
-    ChipLogProgress(Controller, "SendRemoveFabricIndex : %u", fabricIndex);
-
-    OperationalCredentials::Commands::RemoveFabric::Type request;
-    request.fabricIndex = fabricIndex;
-
-    OperationalCredentialsCluster cluster(*mProxy->GetExchangeManager(), mProxy->GetSecureSession().Value(), 0);
-
-    CHIP_ERROR err = cluster.InvokeCommand(request, this, OnRemoveFabric, OnCommandFailure);
-    if (err != CHIP_NO_ERROR)
-    {
-        SetLastError(err);
-        PerformDeviceUnpairStep(UnpairDeviceStage::kUnpairError);
-        return;
-    }
-}
-
-void DeviceUnpair::FinishUnpairDevice(CHIP_ERROR err)
-{
-    mProxy                  = nullptr;
-    mOperationalDeviceProxy = nullptr;
-
-    if (mCallback != nullptr)
-    {
-        mCallback->OnDeviceUnpair(mRemoteDeviceId, err);
-    }
-}
-
-void DeviceUnpair::GenerateOperationalDeviceProxy(Messaging::ExchangeManager & exchangeMgr, SessionHandle & sessionHandle)
-{
-    auto proxy              = Platform::MakeShared<OperationalDeviceProxy>(&exchangeMgr, sessionHandle);
-    mOperationalDeviceProxy = std::move(proxy);
-    RegisterDeviceProxy(mOperationalDeviceProxy.get());
-}
-
-void DeviceUnpair::OnDeviceConnectedFn(void * context, Messaging::ExchangeManager & exchangeMgr, SessionHandle & sessionHandle)
-{
-    DeviceUnpair * deviceUnpair = static_cast<DeviceUnpair *>(context);
-    VerifyOrReturn(deviceUnpair != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
-
-    deviceUnpair->GenerateOperationalDeviceProxy(exchangeMgr, sessionHandle);
-    deviceUnpair->PerformDeviceUnpairStep(UnpairDeviceStage::kReadCurrentFabricIndex);
-}
-
-void DeviceUnpair::OnDeviceConnectionFailureFn(void * context, const ScopedNodeId & peerId, CHIP_ERROR err)
-{
-    ChipLogProgress(Controller, "OnDeviceConnectionFailureFn %s", err.AsString());
-
-    DeviceUnpair * deviceUnpair = static_cast<DeviceUnpair *>(context);
-    VerifyOrReturn(deviceUnpair != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
-
-    deviceUnpair->SetLastError(err);
-    deviceUnpair->PerformDeviceUnpairStep(UnpairDeviceStage::kUnpairError);
-}
-
-void DeviceUnpair::OnSuccessCurrentFabricIndex(void * context, uint8_t fabricIndex)
-{
-    DeviceUnpair * deviceUnpair = static_cast<DeviceUnpair *>(context);
-    VerifyOrReturn(deviceUnpair != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
-    deviceUnpair->mFabricIndex = fabricIndex;
-
-    deviceUnpair->PerformDeviceUnpairStep(UnpairDeviceStage::kSendRemoveFabric);
-}
-
-void DeviceUnpair::OnReadAttributeFailure(void * context, CHIP_ERROR err)
-{
-    ChipLogProgress(Controller, "OnCommandFailure %s", err.AsString());
-
-    DeviceUnpair * deviceUnpair = static_cast<DeviceUnpair *>(context);
-    VerifyOrReturn(deviceUnpair != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
-
-    deviceUnpair->SetLastError(err);
-    deviceUnpair->PerformDeviceUnpairStep(UnpairDeviceStage::kUnpairError);
-}
-
-void DeviceUnpair::OnRemoveFabric(void * context, const OperationalCredentials::Commands::NOCResponse::DecodableType & data)
-{
-    DeviceUnpair * deviceUnpair = static_cast<DeviceUnpair *>(context);
-    VerifyOrReturn(deviceUnpair != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
-
-    deviceUnpair->PerformDeviceUnpairStep(UnpairDeviceStage::kUnpairCleanUp);
-}
-
-void DeviceUnpair::OnCommandFailure(void * context, CHIP_ERROR err)
-{
-    ChipLogProgress(Controller, "OnCommandFailure %s", err.AsString());
-
-    DeviceUnpair * deviceUnpair = static_cast<DeviceUnpair *>(context);
-    VerifyOrReturn(deviceUnpair != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
-
-    deviceUnpair->SetLastError(err);
-    deviceUnpair->PerformDeviceUnpairStep(UnpairDeviceStage::kUnpairError);
-}
-} // namespace Controller
-} // namespace chip
diff --git a/src/controller/DeviceUnpair.h b/src/controller/DeviceUnpair.h
deleted file mode 100644
index 38667626cb792..0000000000000
--- a/src/controller/DeviceUnpair.h
+++ /dev/null
@@ -1,95 +0,0 @@
-/*
- *
- *    Copyright (c) 2021 Project CHIP Authors
- *    All rights reserved.
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-#pragma once
-
-#include <app/OperationalSessionSetup.h>
-#include <lib/core/CHIPCallback.h>
-
-namespace chip {
-namespace Controller {
-
-enum UnpairDeviceStage : uint8_t
-{
-    kUnpairError,
-    kReadCurrentFabricIndex,
-    kSendRemoveFabric,
-    kUnpairCleanUp,
-};
-
-class DLL_EXPORT DeviceUnpair
-{
-public:
-    class Callback
-    {
-    public:
-        virtual ~Callback(){};
-        virtual void OnDeviceUnpair(NodeId remoteDeviceId, CHIP_ERROR err){};
-    };
-
-    DeviceUnpair();
-    ~DeviceUnpair() {}
-
-    void RegisterCallback(Callback * callback);
-    void UnpairDevice(DeviceProxy * proxy, NodeId remoteDeviceId);
-
-private:
-    CHIP_ERROR mLastError = CHIP_NO_ERROR;
-    Callback * mCallback  = nullptr;
-
-    chip::Callback::Callback<OnDeviceConnected> mOnDeviceConnectedCallback;
-    chip::Callback::Callback<OnDeviceConnectionFailure> mOnDeviceConnectionFailureCallback;
-
-    DeviceProxy * mProxy = nullptr;
-    Platform::SharedPtr<OperationalDeviceProxy> mOperationalDeviceProxy;
-    NodeId mRemoteDeviceId;
-    FabricIndex mFabricIndex = kUndefinedFabricIndex;
-    UnpairDeviceStage mStage = UnpairDeviceStage::kUnpairError;
-
-    void RegisterDeviceProxy(DeviceProxy * proxy) { mProxy = proxy; }
-    void SetLastError(CHIP_ERROR err) { mLastError = err; }
-
-    void GenerateOperationalDeviceProxy(Messaging::ExchangeManager & exchangeMgr, SessionHandle & sessionHandle);
-
-    void PerformDeviceUnpairStep(UnpairDeviceStage stage);
-
-    void ReadCurrentFabricIndex();
-    void SendRemoveFabricIndex(FabricIndex fabricIndex);
-    void FinishUnpairDevice(CHIP_ERROR err);
-
-    static void OnDeviceConnectedFn(void * context, Messaging::ExchangeManager & exchangeMgr, SessionHandle & sessionHandle);
-    static void OnDeviceConnectionFailureFn(void * context, const ScopedNodeId & peerId, CHIP_ERROR error);
-
-    static void OnSuccessCurrentFabricIndex(void * context, uint8_t fabricIndex);
-    static void OnReadAttributeFailure(void * context, CHIP_ERROR error);
-
-    static void OnRemoveFabric(void * context,
-                               const chip::app::Clusters::OperationalCredentials::Commands::NOCResponse::DecodableType & data);
-
-    static void OnCommandFailure(void * context, CHIP_ERROR error);
-
-public:
-    chip::Callback::Callback<OnDeviceConnected> & GetConnectedCallback() { return mOnDeviceConnectedCallback; }
-    chip::Callback::Callback<OnDeviceConnectionFailure> & GetConnectionFailureCallback()
-    {
-        return mOnDeviceConnectionFailureCallback;
-    }
-};
-
-} // namespace Controller
-} // namespace chip
diff --git a/src/controller/java/AndroidCurrentFabricRemover.cpp b/src/controller/java/AndroidCurrentFabricRemover.cpp
new file mode 100644
index 0000000000000..1ba6a67f1121c
--- /dev/null
+++ b/src/controller/java/AndroidCurrentFabricRemover.cpp
@@ -0,0 +1,103 @@
+/*
+ *    Copyright (c) 2022 Project CHIP Authors
+ *    All rights reserved.
+ *
+ *    Licensed under the Apache License, Version 2.0 (the "License");
+ *    you may not use this file except in compliance with the License.
+ *    You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *    Unless required by applicable law or agreed to in writing, software
+ *    distributed under the License is distributed on an "AS IS" BASIS,
+ *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *    See the License for the specific language governing permissions and
+ *    limitations under the License.
+ */
+
+#include "AndroidCurrentFabricRemover.h"
+
+#include <lib/support/JniReferences.h>
+#include <lib/support/JniTypeWrappers.h>
+
+namespace chip {
+namespace Controller {
+
+AndroidCurrentFabricRemover::AndroidCurrentFabricRemover(DeviceCommissioner * commissioner, jobject jCallbackObject) :
+    CurrentFabricRemover(commissioner), mOnRemoveCurrentFabricCallback(OnRemoveCurrentFabric, this)
+{
+    JNIEnv * env  = JniReferences::GetInstance().GetEnvForCurrentThread();
+    mJavaCallback = env->NewGlobalRef(jCallbackObject);
+
+    jclass callbackClass = env->GetObjectClass(jCallbackObject);
+
+    mOnSuccessMethod = env->GetMethodID(callbackClass, "onSuccess", "(J)V");
+    if (mOnSuccessMethod == nullptr)
+    {
+        ChipLogError(Controller, "Failed to access callback 'onSuccess' method");
+        env->ExceptionClear();
+    }
+
+    mOnErrorMethod = env->GetMethodID(callbackClass, "onError", "(IJ)V");
+    if (mOnErrorMethod == nullptr)
+    {
+        ChipLogError(Controller, "Failed to access callback 'onError' method");
+        env->ExceptionClear();
+    }
+}
+
+AndroidCurrentFabricRemover::~AndroidCurrentFabricRemover()
+{
+    ChipLogError(Controller, "Delete AndroidCurrentFabricRemover");
+    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
+    env->DeleteGlobalRef(mJavaCallback);
+}
+
+CHIP_ERROR AndroidCurrentFabricRemover::RemoveCurrentFabric(DeviceCommissioner * controller, NodeId remoteDeviceId,
+                                                            jobject jcallback)
+{
+    // Not using Platform::New because we want to keep our constructor private.
+    auto * remover = new AndroidCurrentFabricRemover(controller, jcallback);
+    if (remover == nullptr)
+    {
+        return CHIP_ERROR_NO_MEMORY;
+    }
+
+    CHIP_ERROR err = remover->CurrentFabricRemover::CurrentFabricRemove(remoteDeviceId, &remover->mOnRemoveCurrentFabricCallback);
+    if (err != CHIP_NO_ERROR)
+    {
+        delete remover;
+    }
+    // Else will clean up when the callback is called.
+    return err;
+}
+
+void AndroidCurrentFabricRemover::OnRemoveCurrentFabric(void * context, NodeId remoteDeviceId, CHIP_ERROR err)
+{
+    auto * self = static_cast<AndroidCurrentFabricRemover *>(context);
+
+    if (self->mJavaCallback != nullptr)
+    {
+        JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
+        if (err == CHIP_NO_ERROR)
+        {
+            if (self->mOnSuccessMethod != nullptr)
+            {
+                env->CallVoidMethod(self->mJavaCallback, self->mOnSuccessMethod, static_cast<jlong>(remoteDeviceId));
+            }
+        }
+        else
+        {
+            if (self->mOnErrorMethod != nullptr)
+            {
+                env->CallVoidMethod(self->mJavaCallback, self->mOnErrorMethod, static_cast<jint>(err.GetValue()),
+                                    static_cast<jlong>(remoteDeviceId));
+            }
+        }
+    }
+
+    delete self;
+}
+
+} // namespace Controller
+} // namespace chip
diff --git a/src/controller/java/AndroidCurrentFabricRemover.h b/src/controller/java/AndroidCurrentFabricRemover.h
new file mode 100644
index 0000000000000..b890c9f51a53b
--- /dev/null
+++ b/src/controller/java/AndroidCurrentFabricRemover.h
@@ -0,0 +1,49 @@
+/*
+ *    Copyright (c) 2022 Project CHIP Authors
+ *    All rights reserved.
+ *
+ *    Licensed under the Apache License, Version 2.0 (the "License");
+ *    you may not use this file except in compliance with the License.
+ *    You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *    Unless required by applicable law or agreed to in writing, software
+ *    distributed under the License is distributed on an "AS IS" BASIS,
+ *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *    See the License for the specific language governing permissions and
+ *    limitations under the License.
+ */
+
+#pragma once
+
+#include <controller/CurrentFabricRemover.h>
+#include <jni.h>
+
+namespace chip {
+namespace Controller {
+
+/**
+ * A helper class that can be used by consumers that don't care about the callback from the
+ * remove Fabric process and just want automatic cleanup of the CurrentFabricRemover when done
+ * with it.
+ */
+class AndroidCurrentFabricRemover : private CurrentFabricRemover
+{
+public:
+    static CHIP_ERROR RemoveCurrentFabric(DeviceCommissioner * controller, NodeId remoteDeviceId, jobject jcallback);
+
+private:
+    AndroidCurrentFabricRemover(DeviceCommissioner * commissioner, jobject javaCallbackObject);
+    ~AndroidCurrentFabricRemover();
+
+    static void OnRemoveCurrentFabric(void * context, NodeId remoteDeviceId, CHIP_ERROR status);
+    chip::Callback::Callback<OnCurrentFabricRemove> mOnRemoveCurrentFabricCallback;
+
+    jobject mJavaCallback;
+    jmethodID mOnSuccessMethod = nullptr;
+    jmethodID mOnErrorMethod   = nullptr;
+};
+
+} // Namespace Controller
+} // namespace chip
diff --git a/src/controller/java/BUILD.gn b/src/controller/java/BUILD.gn
index d7c68afd51880..979f69122bf3a 100644
--- a/src/controller/java/BUILD.gn
+++ b/src/controller/java/BUILD.gn
@@ -32,6 +32,8 @@ shared_library("jni") {
     "AndroidClusterExceptions.h",
     "AndroidCommissioningWindowOpener.cpp",
     "AndroidCommissioningWindowOpener.h",
+    "AndroidCurrentFabricRemover.cpp",
+    "AndroidCurrentFabricRemover.h",
     "AndroidDeviceControllerWrapper.cpp",
     "AndroidDeviceControllerWrapper.h",
     "AndroidOperationalCredentialsIssuer.cpp",
@@ -120,6 +122,7 @@ android_library("java") {
     "src/chip/devicecontroller/ReportEventCallbackJni.java",
     "src/chip/devicecontroller/ResubscriptionAttemptCallback.java",
     "src/chip/devicecontroller/SubscriptionEstablishedCallback.java",
+    "src/chip/devicecontroller/UnpairDeviceCallback.java",
     "src/chip/devicecontroller/model/AttributeState.java",
     "src/chip/devicecontroller/model/ChipAttributePath.java",
     "src/chip/devicecontroller/model/ChipEventPath.java",
diff --git a/src/controller/java/CHIPDeviceController-JNI.cpp b/src/controller/java/CHIPDeviceController-JNI.cpp
index bed3ffda5f0c4..a6d1f2717c612 100644
--- a/src/controller/java/CHIPDeviceController-JNI.cpp
+++ b/src/controller/java/CHIPDeviceController-JNI.cpp
@@ -23,6 +23,7 @@
  */
 #include "AndroidCallbacks.h"
 #include "AndroidCommissioningWindowOpener.h"
+#include "AndroidCurrentFabricRemover.h"
 #include "AndroidDeviceControllerWrapper.h"
 #include <lib/support/CHIPJNIError.h>
 #include <lib/support/JniReferences.h>
@@ -689,6 +690,23 @@ JNI_METHOD(void, unpairDevice)(JNIEnv * env, jobject self, jlong handle, jlong d
     }
 }
 
+JNI_METHOD(void, unpairDeviceCallback)(JNIEnv * env, jobject self, jlong handle, jlong deviceId, jobject callback)
+{
+    chip::DeviceLayer::StackLock lock;
+    CHIP_ERROR err                           = CHIP_NO_ERROR;
+    AndroidDeviceControllerWrapper * wrapper = AndroidDeviceControllerWrapper::FromJNIHandle(handle);
+
+    ChipLogProgress(Controller, "unpairDeviceCallback() called with device ID and callback object");
+
+    err = AndroidCurrentFabricRemover::RemoveCurrentFabric(wrapper->Controller(), static_cast<NodeId>(deviceId), callback);
+
+    if (err != CHIP_NO_ERROR)
+    {
+        ChipLogError(Controller, "Failed to unpair the device.");
+        JniReferences::GetInstance().ThrowError(env, sChipDeviceControllerExceptionCls, err);
+    }
+}
+
 JNI_METHOD(void, stopDevicePairing)(JNIEnv * env, jobject self, jlong handle, jlong deviceId)
 {
     chip::DeviceLayer::StackLock lock;
diff --git a/src/controller/java/src/chip/devicecontroller/ChipDeviceController.java b/src/controller/java/src/chip/devicecontroller/ChipDeviceController.java
index 7004fac4e177a..bc1b66838efcf 100644
--- a/src/controller/java/src/chip/devicecontroller/ChipDeviceController.java
+++ b/src/controller/java/src/chip/devicecontroller/ChipDeviceController.java
@@ -238,6 +238,10 @@ public void unpairDevice(long deviceId) {
     unpairDevice(deviceControllerPtr, deviceId);
   }
 
+  public void unpairDeviceCallback(long deviceId, UnpairDeviceCallback callback) {
+    unpairDeviceCallback(deviceControllerPtr, deviceId, callback);
+  }
+
   /**
    * Returns a pointer to a device currently being commissioned. This should be used before the
    * device is operationally available.
@@ -643,6 +647,9 @@ private native void commissionDevice(
 
   private native void unpairDevice(long deviceControllerPtr, long deviceId);
 
+  private native void unpairDeviceCallback(
+      long deviceControllerPtr, long deviceId, UnpairDeviceCallback callback);
+
   private native long getDeviceBeingCommissionedPointer(long deviceControllerPtr, long nodeId);
 
   private native void getConnectedDevicePointer(
diff --git a/src/controller/java/src/chip/devicecontroller/UnpairDeviceCallback.java b/src/controller/java/src/chip/devicecontroller/UnpairDeviceCallback.java
new file mode 100644
index 0000000000000..7e533b6433884
--- /dev/null
+++ b/src/controller/java/src/chip/devicecontroller/UnpairDeviceCallback.java
@@ -0,0 +1,24 @@
+/*
+ *   Copyright (c) 2022 Project CHIP Authors
+ *   All rights reserved.
+ *
+ *   Licensed under the Apache License, Version 2.0 (the "License");
+ *   you may not use this file except in compliance with the License.
+ *   You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *   Unless required by applicable law or agreed to in writing, software
+ *   distributed under the License is distributed on an "AS IS" BASIS,
+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *   See the License for the specific language governing permissions and
+ *   limitations under the License.
+ *
+ */
+package chip.devicecontroller;
+
+public interface UnpairDeviceCallback {
+  public void onError(int status, long remoteDeviceId);
+
+  public void onSuccess(long remoteDeviceId);
+}

From 0766595fa9c766c346e5ea359d2df54181011f50 Mon Sep 17 00:00:00 2001
From: Joonhaeng Heo <jh.heo@lge.com>
Date: Mon, 26 Dec 2022 18:01:00 +0900
Subject: [PATCH 7/9] Modify from comment

---
 .../commands/pairing/PairingCommand.cpp       | 10 ++--
 .../commands/pairing/PairingCommand.h         |  3 +-
 src/controller/CHIPDeviceController.cpp       |  8 ++-
 src/controller/CHIPDeviceController.h         |  3 --
 src/controller/CurrentFabricRemover.cpp       | 54 +++++++++----------
 src/controller/CurrentFabricRemover.h         | 25 ++++-----
 .../java/AndroidCurrentFabricRemover.cpp      | 15 +++---
 .../java/AndroidCurrentFabricRemover.h        | 11 ++--
 8 files changed, 59 insertions(+), 70 deletions(-)

diff --git a/examples/chip-tool/commands/pairing/PairingCommand.cpp b/examples/chip-tool/commands/pairing/PairingCommand.cpp
index e80b11c7d2252..9c185024ad207 100644
--- a/examples/chip-tool/commands/pairing/PairingCommand.cpp
+++ b/examples/chip-tool/commands/pairing/PairingCommand.cpp
@@ -162,7 +162,7 @@ CHIP_ERROR PairingCommand::PairWithMdns(NodeId remoteId)
 CHIP_ERROR PairingCommand::Unpair(NodeId remoteId)
 {
     mCurrentFabricRemover = Platform::MakeUnique<Controller::CurrentFabricRemover>(&CurrentCommissioner());
-    return mCurrentFabricRemover->CurrentFabricRemove(remoteId, &mCurrentFabricRemoveCallback);
+    return mCurrentFabricRemover->RemoveCurrentFabric(remoteId, &mCurrentFabricRemoveCallback);
 }
 
 void PairingCommand::OnStatusUpdate(DevicePairingDelegate::Status status)
@@ -265,18 +265,18 @@ void PairingCommand::OnDiscoveredDevice(const chip::Dnssd::DiscoveredNodeData &
     }
 }
 
-void PairingCommand::OnCurrentFabricRemove(void * context, NodeId remoteDeviceId, CHIP_ERROR err)
+void PairingCommand::OnCurrentFabricRemove(void * context, NodeId nodeId, CHIP_ERROR err)
 {
     PairingCommand * command = reinterpret_cast<PairingCommand *>(context);
-    VerifyOrReturn(command != nullptr, ChipLogError(chipTool, "OnOpenCommissioningWindowCommand: context is null"));
+    VerifyOrReturn(command != nullptr, ChipLogError(chipTool, "OnCurrentFabricRemove: context is null"));
 
     if (err == CHIP_NO_ERROR)
     {
-        ChipLogProgress(chipTool, "Device unpair completed with success: " ChipLogFormatX64, ChipLogValueX64(remoteDeviceId));
+        ChipLogProgress(chipTool, "Device unpair completed with success: " ChipLogFormatX64, ChipLogValueX64(nodeId));
     }
     else
     {
-        ChipLogProgress(chipTool, "Device unpair Failure: " ChipLogFormatX64 " %s", ChipLogValueX64(remoteDeviceId), ErrorStr(err));
+        ChipLogProgress(chipTool, "Device unpair Failure: " ChipLogFormatX64 " %s", ChipLogValueX64(nodeId), ErrorStr(err));
     }
 
     command->SetCommandExitStatus(err);
diff --git a/examples/chip-tool/commands/pairing/PairingCommand.h b/examples/chip-tool/commands/pairing/PairingCommand.h
index 2fd6f1acac7a0..4919ec89de8ad 100644
--- a/examples/chip-tool/commands/pairing/PairingCommand.h
+++ b/examples/chip-tool/commands/pairing/PairingCommand.h
@@ -20,6 +20,7 @@
 
 #include "../common/CHIPCommand.h"
 #include <controller/CommissioningDelegate.h>
+#include <controller/CurrentFabricRemover.h>
 #include <zap-generated/CHIPClusters.h>
 
 #include <commands/common/CredentialIssuerCommands.h>
@@ -190,5 +191,5 @@ class PairingCommand : public CHIPCommand,
     chip::Platform::UniquePtr<chip::Controller::CurrentFabricRemover> mCurrentFabricRemover;
     chip::Callback::Callback<chip::Controller::OnCurrentFabricRemove> mCurrentFabricRemoveCallback;
 
-    static void OnCurrentFabricRemove(void * context, NodeId remoteDeviceId, CHIP_ERROR status);
+    static void OnCurrentFabricRemove(void * context, NodeId remoteNodeId, CHIP_ERROR status);
 };
diff --git a/src/controller/CHIPDeviceController.cpp b/src/controller/CHIPDeviceController.cpp
index 02b6c3f9fe477..d80c06c7299fa 100644
--- a/src/controller/CHIPDeviceController.cpp
+++ b/src/controller/CHIPDeviceController.cpp
@@ -45,6 +45,7 @@
 #include <app/InteractionModelEngine.h>
 #include <app/OperationalSessionSetup.h>
 #include <app/util/error-mapping.h>
+#include <controller/CurrentFabricRemover.h>
 #include <credentials/CHIPCert.h>
 #include <credentials/DeviceAttestationCredsProvider.h>
 #include <crypto/CHIPCryptoPAL.h>
@@ -894,19 +895,16 @@ CHIP_ERROR DeviceCommissioner::StopPairing(NodeId remoteDeviceId)
 
 CHIP_ERROR DeviceCommissioner::UnpairDevice(NodeId remoteDeviceId)
 {
-    CHIP_ERROR err = CHIP_NO_ERROR;
     MATTER_TRACE_EVENT_SCOPE("UnpairDevice", "DeviceCommissioner");
 
     if (mState == State::Initialized)
     {
-        err = AutoCurrentFabricRemover::RemoveCurrentFabric(this, remoteDeviceId);
+        return AutoCurrentFabricRemover::RemoveCurrentFabric(this, remoteDeviceId);
     }
     else // the device is currently being paired
     {
-        err = StopPairing(remoteDeviceId);
+        return StopPairing(remoteDeviceId);
     }
-
-    return err;
 }
 
 void DeviceCommissioner::RendezvousCleanup(CHIP_ERROR status)
diff --git a/src/controller/CHIPDeviceController.h b/src/controller/CHIPDeviceController.h
index 758e72f1a3873..e98c9116881c9 100644
--- a/src/controller/CHIPDeviceController.h
+++ b/src/controller/CHIPDeviceController.h
@@ -39,7 +39,6 @@
 #include <controller/CHIPDeviceControllerSystemState.h>
 #include <controller/CommissioneeDeviceProxy.h>
 #include <controller/CommissioningDelegate.h>
-#include <controller/CurrentFabricRemover.h>
 #include <controller/DevicePairingDelegate.h>
 #include <controller/OperationalCredentialsDelegate.h>
 #include <controller/SetUpCodePairer.h>
@@ -913,8 +912,6 @@ class DLL_EXPORT DeviceCommissioner : public DeviceController,
     Credentials::AttestationVerificationResult mAttestationResult;
     Platform::UniquePtr<Credentials::DeviceAttestationVerifier::AttestationDeviceInfo> mAttestationDeviceInfo;
     Credentials::DeviceAttestationVerifier * mDeviceAttestationVerifier = nullptr;
-
-    // Platform::UniquePtr<DeviceUnpair> mDeviceUnpair;
 };
 
 } // namespace Controller
diff --git a/src/controller/CurrentFabricRemover.cpp b/src/controller/CurrentFabricRemover.cpp
index 2e5f04b69e40f..d5aefe977609a 100644
--- a/src/controller/CurrentFabricRemover.cpp
+++ b/src/controller/CurrentFabricRemover.cpp
@@ -26,13 +26,13 @@ using namespace chip::app::Clusters;
 namespace chip {
 namespace Controller {
 
-CHIP_ERROR CurrentFabricRemover::CurrentFabricRemove(NodeId remoteDeviceId, Callback::Callback<OnCurrentFabricRemove> * callback)
+CHIP_ERROR CurrentFabricRemover::RemoveCurrentFabric(NodeId remoteNodeId, Callback::Callback<OnCurrentFabricRemove> * callback)
 {
-    mRemoteDeviceId              = remoteDeviceId;
+    mRemoteNodeId                = remoteNodeId;
     mCurrentFabricRemoveCallback = callback;
     mNextStep                    = Step::kReadCurrentFabricIndex;
 
-    return mCommissioner->GetConnectedDevice(remoteDeviceId, &mOnDeviceConnectedCallback, &mOnDeviceConnectionFailureCallback);
+    return mController->GetConnectedDevice(remoteNodeId, &mOnDeviceConnectedCallback, &mOnDeviceConnectionFailureCallback);
 }
 
 CHIP_ERROR CurrentFabricRemover::ReadCurrentFabricIndex(Messaging::ExchangeManager & exchangeMgr, SessionHandle & sessionHandle)
@@ -49,7 +49,6 @@ CHIP_ERROR CurrentFabricRemover::SendRemoveFabricIndex(Messaging::ExchangeManage
     {
         return CHIP_ERROR_INVALID_FABRIC_INDEX;
     }
-    ChipLogProgress(Controller, "SendRemoveFabricIndex : %u", mFabricIndex);
 
     OperationalCredentials::Commands::RemoveFabric::Type request;
     request.fabricIndex = mFabricIndex;
@@ -83,69 +82,64 @@ void CurrentFabricRemover::OnDeviceConnectedFn(void * context, Messaging::Exchan
 
     if (err != CHIP_NO_ERROR)
     {
-        ChipLogError(Controller, "%" CHIP_ERROR_FORMAT, err.Format());
+        ChipLogError(Controller, "Current Fabric Remover failure : %" CHIP_ERROR_FORMAT, err.Format());
         FinishRemoveCurrentFabric(context, err);
     }
-
-    return;
 }
 
 void CurrentFabricRemover::OnDeviceConnectionFailureFn(void * context, const ScopedNodeId & peerId, CHIP_ERROR err)
 {
-    ChipLogProgress(Controller, "OnDeviceConnectionFailureFn: %s", err.AsString());
+    ChipLogProgress(Controller, "OnDeviceConnectionFailureFn: %" CHIP_ERROR_FORMAT, err.Format());
 
     auto * self = static_cast<CurrentFabricRemover *>(context);
-    VerifyOrReturn(self != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
+    VerifyOrReturn(self != nullptr, ChipLogProgress(Controller, "Device connected failure callback with null context. Ignoring"));
 
     FinishRemoveCurrentFabric(context, err);
-    return;
 }
 
-void CurrentFabricRemover::OnSuccessReadCurrentFabricIndex(void * context, uint8_t fabricIndex)
+void CurrentFabricRemover::OnSuccessReadCurrentFabricIndex(void * context, FabricIndex fabricIndex)
 {
     auto * self = static_cast<CurrentFabricRemover *>(context);
-    VerifyOrReturn(self != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
+    VerifyOrReturn(self != nullptr,
+                   ChipLogProgress(Controller, "Success Read Current Fabric index callback with null context. Ignoring"));
     self->mFabricIndex = fabricIndex;
     self->mNextStep    = Step::kSendRemoveFabric;
-    CHIP_ERROR err     = self->mCommissioner->GetConnectedDevice(self->mRemoteDeviceId, &self->mOnDeviceConnectedCallback,
-                                                             &self->mOnDeviceConnectionFailureCallback);
+    CHIP_ERROR err     = self->mController->GetConnectedDevice(self->mRemoteNodeId, &self->mOnDeviceConnectedCallback,
+                                                           &self->mOnDeviceConnectionFailureCallback);
     if (err != CHIP_NO_ERROR)
     {
         FinishRemoveCurrentFabric(context, err);
     }
-    return;
 }
 
 void CurrentFabricRemover::OnReadAttributeFailure(void * context, CHIP_ERROR err)
 {
-    ChipLogProgress(Controller, "OnReadAttributeFailure %s", err.AsString());
+    ChipLogProgress(Controller, "OnReadAttributeFailure %" CHIP_ERROR_FORMAT, err.Format());
 
     auto * self = static_cast<CurrentFabricRemover *>(context);
-    VerifyOrReturn(self != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
+    VerifyOrReturn(self != nullptr, ChipLogProgress(Controller, "Read Attribute failure callback with null context. Ignoring"));
 
     FinishRemoveCurrentFabric(context, err);
-    return;
 }
 
 void CurrentFabricRemover::OnSuccessRemoveFabric(void * context,
                                                  const OperationalCredentials::Commands::NOCResponse::DecodableType & data)
 {
     auto * self = static_cast<CurrentFabricRemover *>(context);
-    VerifyOrReturn(self != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
+    VerifyOrReturn(self != nullptr,
+                   ChipLogProgress(Controller, "Success Remove Fabric command callback with null context. Ignoring"));
 
     FinishRemoveCurrentFabric(context, CHIP_NO_ERROR);
-    return;
 }
 
 void CurrentFabricRemover::OnCommandFailure(void * context, CHIP_ERROR err)
 {
-    ChipLogProgress(Controller, "OnCommandFailure %s", err.AsString());
+    ChipLogProgress(Controller, "OnCommandFailure %" CHIP_ERROR_FORMAT, err.Format());
 
     auto * self = static_cast<CurrentFabricRemover *>(context);
-    VerifyOrReturn(self != nullptr, ChipLogProgress(Controller, "Device connected callback with null context. Ignoring"));
+    VerifyOrReturn(self != nullptr, ChipLogProgress(Controller, "Send command failure callback with null context. Ignoring"));
 
     FinishRemoveCurrentFabric(context, err);
-    return;
 }
 
 void CurrentFabricRemover::FinishRemoveCurrentFabric(void * context, CHIP_ERROR err)
@@ -155,24 +149,24 @@ void CurrentFabricRemover::FinishRemoveCurrentFabric(void * context, CHIP_ERROR
     self->mNextStep = Step::kAcceptRemoveFabricStart;
     if (self->mCurrentFabricRemoveCallback != nullptr)
     {
-        self->mCurrentFabricRemoveCallback->mCall(self->mCurrentFabricRemoveCallback->mContext, self->mRemoteDeviceId, err);
+        self->mCurrentFabricRemoveCallback->mCall(self->mCurrentFabricRemoveCallback->mContext, self->mRemoteNodeId, err);
     }
 }
 
-AutoCurrentFabricRemover::AutoCurrentFabricRemover(DeviceCommissioner * commissioner) :
-    CurrentFabricRemover(commissioner), mOnRemoveCurrentFabricCallback(OnRemoveCurrentFabric, this)
+AutoCurrentFabricRemover::AutoCurrentFabricRemover(DeviceController * controller) :
+    CurrentFabricRemover(controller), mOnRemoveCurrentFabricCallback(OnRemoveCurrentFabric, this)
 {}
 
-CHIP_ERROR AutoCurrentFabricRemover::RemoveCurrentFabric(DeviceCommissioner * commissoner, NodeId remoteDeviceId)
+CHIP_ERROR AutoCurrentFabricRemover::RemoveCurrentFabric(DeviceController * controller, NodeId remoteNodeId)
 {
     // Not using Platform::New because we want to keep our constructor private.
-    auto * remover = new (std::nothrow) AutoCurrentFabricRemover(commissoner);
+    auto * remover = new (std::nothrow) AutoCurrentFabricRemover(controller);
     if (remover == nullptr)
     {
         return CHIP_ERROR_NO_MEMORY;
     }
 
-    CHIP_ERROR err = remover->CurrentFabricRemover::CurrentFabricRemove(remoteDeviceId, &remover->mOnRemoveCurrentFabricCallback);
+    CHIP_ERROR err = remover->CurrentFabricRemover::RemoveCurrentFabric(remoteNodeId, &remover->mOnRemoveCurrentFabricCallback);
     if (err != CHIP_NO_ERROR)
     {
         delete remover;
@@ -181,7 +175,7 @@ CHIP_ERROR AutoCurrentFabricRemover::RemoveCurrentFabric(DeviceCommissioner * co
     return err;
 }
 
-void AutoCurrentFabricRemover::OnRemoveCurrentFabric(void * context, NodeId remoteDeviceId, CHIP_ERROR status)
+void AutoCurrentFabricRemover::OnRemoveCurrentFabric(void * context, NodeId remoteNodeId, CHIP_ERROR status)
 {
     auto * self = static_cast<AutoCurrentFabricRemover *>(context);
     delete self;
diff --git a/src/controller/CurrentFabricRemover.h b/src/controller/CurrentFabricRemover.h
index a9f2c7cd72b11..8acef3cc56930 100644
--- a/src/controller/CurrentFabricRemover.h
+++ b/src/controller/CurrentFabricRemover.h
@@ -25,7 +25,7 @@
 namespace chip {
 namespace Controller {
 
-typedef void (*OnCurrentFabricRemove)(void * context, NodeId remoteDeviceId, CHIP_ERROR status);
+typedef void (*OnCurrentFabricRemove)(void * context, NodeId remoteNodeId, CHIP_ERROR status);
 
 /**
  * A helper class to remove fabric given some parameters.
@@ -33,8 +33,8 @@ typedef void (*OnCurrentFabricRemove)(void * context, NodeId remoteDeviceId, CHI
 class CurrentFabricRemover
 {
 public:
-    CurrentFabricRemover(DeviceCommissioner * commissioner) :
-        mCommissioner(commissioner), mOnDeviceConnectedCallback(&OnDeviceConnectedFn, this),
+    CurrentFabricRemover(DeviceController * controller) :
+        mController(controller), mOnDeviceConnectedCallback(&OnDeviceConnectedFn, this),
         mOnDeviceConnectionFailureCallback(&OnDeviceConnectionFailureFn, this)
     {}
 
@@ -51,21 +51,22 @@ class CurrentFabricRemover
     /*
      * @brief
      *   Try to look up the device attached to our controller with the given
-     *   remote device id and ask it to remove Fabric.
+     *   remote node id and ask it to remove Fabric.
+     *   If function returns an error, callback will never be be executed. Otherwise, callback will always be executed.
      *
-     * @param[in] remoteDeviceId The remote device Id
+     * @param[in] remoteNodeId The remote device Id
      * @param[in] callback The callback to call once the remote fabric is completed or not.
      */
-    CHIP_ERROR CurrentFabricRemove(NodeId remoteDeviceId, Callback::Callback<OnCurrentFabricRemove> * callback);
+    CHIP_ERROR RemoveCurrentFabric(NodeId remoteNodeId, Callback::Callback<OnCurrentFabricRemove> * callback);
 
 private:
-    DeviceCommissioner * mCommissioner;
+    DeviceController * mController;
 
     chip::Callback::Callback<OnDeviceConnected> mOnDeviceConnectedCallback;
     chip::Callback::Callback<OnDeviceConnectionFailure> mOnDeviceConnectionFailureCallback;
     chip::Callback::Callback<OnCurrentFabricRemove> * mCurrentFabricRemoveCallback;
 
-    NodeId mRemoteDeviceId;
+    NodeId mRemoteNodeId;
     FabricIndex mFabricIndex = kUndefinedFabricIndex;
     Step mNextStep           = Step::kAcceptRemoveFabricStart;
 
@@ -75,7 +76,7 @@ class CurrentFabricRemover
     static void OnDeviceConnectedFn(void * context, Messaging::ExchangeManager & exchangeMgr, SessionHandle & sessionHandle);
     static void OnDeviceConnectionFailureFn(void * context, const ScopedNodeId & peerId, CHIP_ERROR error);
 
-    static void OnSuccessReadCurrentFabricIndex(void * context, uint8_t fabricIndex);
+    static void OnSuccessReadCurrentFabricIndex(void * context, FabricIndex fabricIndex);
     static void OnReadAttributeFailure(void * context, CHIP_ERROR error);
 
     static void
@@ -95,11 +96,11 @@ class AutoCurrentFabricRemover : private CurrentFabricRemover
 {
 public:
     // Takes the same arguments as CurrentFabricRemover::RemoveCurrentFabric except without the callback.
-    static CHIP_ERROR RemoveCurrentFabric(DeviceCommissioner * commissoner, NodeId remoteDeviceId);
+    static CHIP_ERROR RemoveCurrentFabric(DeviceController * controller, NodeId remoteNodeId);
 
 private:
-    AutoCurrentFabricRemover(DeviceCommissioner * commissioner);
-    static void OnRemoveCurrentFabric(void * context, NodeId remoteDeviceId, CHIP_ERROR status);
+    AutoCurrentFabricRemover(DeviceController * controller);
+    static void OnRemoveCurrentFabric(void * context, NodeId remoteNodeId, CHIP_ERROR status);
     chip::Callback::Callback<OnCurrentFabricRemove> mOnRemoveCurrentFabricCallback;
 };
 
diff --git a/src/controller/java/AndroidCurrentFabricRemover.cpp b/src/controller/java/AndroidCurrentFabricRemover.cpp
index 1ba6a67f1121c..1029177ae3db3 100644
--- a/src/controller/java/AndroidCurrentFabricRemover.cpp
+++ b/src/controller/java/AndroidCurrentFabricRemover.cpp
@@ -23,8 +23,8 @@
 namespace chip {
 namespace Controller {
 
-AndroidCurrentFabricRemover::AndroidCurrentFabricRemover(DeviceCommissioner * commissioner, jobject jCallbackObject) :
-    CurrentFabricRemover(commissioner), mOnRemoveCurrentFabricCallback(OnRemoveCurrentFabric, this)
+AndroidCurrentFabricRemover::AndroidCurrentFabricRemover(DeviceController * controller, jobject jCallbackObject) :
+    CurrentFabricRemover(controller), mOnRemoveCurrentFabricCallback(OnRemoveCurrentFabric, this)
 {
     JNIEnv * env  = JniReferences::GetInstance().GetEnvForCurrentThread();
     mJavaCallback = env->NewGlobalRef(jCallbackObject);
@@ -53,8 +53,7 @@ AndroidCurrentFabricRemover::~AndroidCurrentFabricRemover()
     env->DeleteGlobalRef(mJavaCallback);
 }
 
-CHIP_ERROR AndroidCurrentFabricRemover::RemoveCurrentFabric(DeviceCommissioner * controller, NodeId remoteDeviceId,
-                                                            jobject jcallback)
+CHIP_ERROR AndroidCurrentFabricRemover::RemoveCurrentFabric(DeviceController * controller, NodeId remoteNodeId, jobject jcallback)
 {
     // Not using Platform::New because we want to keep our constructor private.
     auto * remover = new AndroidCurrentFabricRemover(controller, jcallback);
@@ -63,7 +62,7 @@ CHIP_ERROR AndroidCurrentFabricRemover::RemoveCurrentFabric(DeviceCommissioner *
         return CHIP_ERROR_NO_MEMORY;
     }
 
-    CHIP_ERROR err = remover->CurrentFabricRemover::CurrentFabricRemove(remoteDeviceId, &remover->mOnRemoveCurrentFabricCallback);
+    CHIP_ERROR err = remover->CurrentFabricRemover::RemoveCurrentFabric(remoteNodeId, &remover->mOnRemoveCurrentFabricCallback);
     if (err != CHIP_NO_ERROR)
     {
         delete remover;
@@ -72,7 +71,7 @@ CHIP_ERROR AndroidCurrentFabricRemover::RemoveCurrentFabric(DeviceCommissioner *
     return err;
 }
 
-void AndroidCurrentFabricRemover::OnRemoveCurrentFabric(void * context, NodeId remoteDeviceId, CHIP_ERROR err)
+void AndroidCurrentFabricRemover::OnRemoveCurrentFabric(void * context, NodeId remoteNodeId, CHIP_ERROR err)
 {
     auto * self = static_cast<AndroidCurrentFabricRemover *>(context);
 
@@ -83,7 +82,7 @@ void AndroidCurrentFabricRemover::OnRemoveCurrentFabric(void * context, NodeId r
         {
             if (self->mOnSuccessMethod != nullptr)
             {
-                env->CallVoidMethod(self->mJavaCallback, self->mOnSuccessMethod, static_cast<jlong>(remoteDeviceId));
+                env->CallVoidMethod(self->mJavaCallback, self->mOnSuccessMethod, static_cast<jlong>(remoteNodeId));
             }
         }
         else
@@ -91,7 +90,7 @@ void AndroidCurrentFabricRemover::OnRemoveCurrentFabric(void * context, NodeId r
             if (self->mOnErrorMethod != nullptr)
             {
                 env->CallVoidMethod(self->mJavaCallback, self->mOnErrorMethod, static_cast<jint>(err.GetValue()),
-                                    static_cast<jlong>(remoteDeviceId));
+                                    static_cast<jlong>(remoteNodeId));
             }
         }
     }
diff --git a/src/controller/java/AndroidCurrentFabricRemover.h b/src/controller/java/AndroidCurrentFabricRemover.h
index b890c9f51a53b..a363411549a7f 100644
--- a/src/controller/java/AndroidCurrentFabricRemover.h
+++ b/src/controller/java/AndroidCurrentFabricRemover.h
@@ -24,20 +24,19 @@ namespace chip {
 namespace Controller {
 
 /**
- * A helper class that can be used by consumers that don't care about the callback from the
- * remove Fabric process and just want automatic cleanup of the CurrentFabricRemover when done
- * with it.
+ * AndroidCurrentFabricRemover class is a helper class that automatic cleanup in C++ class memory on Android Platform. Invoke the
+ * java callback object after all the operations are complete.
  */
 class AndroidCurrentFabricRemover : private CurrentFabricRemover
 {
 public:
-    static CHIP_ERROR RemoveCurrentFabric(DeviceCommissioner * controller, NodeId remoteDeviceId, jobject jcallback);
+    static CHIP_ERROR RemoveCurrentFabric(DeviceController * controller, NodeId remoteNodeId, jobject jcallback);
 
 private:
-    AndroidCurrentFabricRemover(DeviceCommissioner * commissioner, jobject javaCallbackObject);
+    AndroidCurrentFabricRemover(DeviceController * controller, jobject javaCallbackObject);
     ~AndroidCurrentFabricRemover();
 
-    static void OnRemoveCurrentFabric(void * context, NodeId remoteDeviceId, CHIP_ERROR status);
+    static void OnRemoveCurrentFabric(void * context, NodeId remoteNodeId, CHIP_ERROR status);
     chip::Callback::Callback<OnCurrentFabricRemove> mOnRemoveCurrentFabricCallback;
 
     jobject mJavaCallback;

From 322f6778ea8f8c38ef23fdb1e9c7626f5b33b8ea Mon Sep 17 00:00:00 2001
From: Joonhaeng Heo <jh.heo@lge.com>
Date: Mon, 26 Dec 2022 22:21:02 +0900
Subject: [PATCH 8/9] Fix clang-tidy validation

---
 src/controller/CHIPDeviceController.cpp | 7 ++-----
 1 file changed, 2 insertions(+), 5 deletions(-)

diff --git a/src/controller/CHIPDeviceController.cpp b/src/controller/CHIPDeviceController.cpp
index d80c06c7299fa..a98d176cabcbc 100644
--- a/src/controller/CHIPDeviceController.cpp
+++ b/src/controller/CHIPDeviceController.cpp
@@ -897,14 +897,11 @@ CHIP_ERROR DeviceCommissioner::UnpairDevice(NodeId remoteDeviceId)
 {
     MATTER_TRACE_EVENT_SCOPE("UnpairDevice", "DeviceCommissioner");
 
-    if (mState == State::Initialized)
-    {
-        return AutoCurrentFabricRemover::RemoveCurrentFabric(this, remoteDeviceId);
-    }
-    else // the device is currently being paired
+    if (mState != State::Initialized) // the device is currently being paired
     {
         return StopPairing(remoteDeviceId);
     }
+    return AutoCurrentFabricRemover::RemoveCurrentFabric(this, remoteDeviceId);
 }
 
 void DeviceCommissioner::RendezvousCleanup(CHIP_ERROR status)

From f9d0e189f5c0b07dee66ad718ff8f651bb0e86bf Mon Sep 17 00:00:00 2001
From: Joonhaeng Heo <jh.heo@lge.com>
Date: Wed, 4 Jan 2023 09:09:49 +0900
Subject: [PATCH 9/9] Change check state

---
 src/controller/CHIPDeviceController.cpp | 5 +----
 1 file changed, 1 insertion(+), 4 deletions(-)

diff --git a/src/controller/CHIPDeviceController.cpp b/src/controller/CHIPDeviceController.cpp
index a98d176cabcbc..46200403e0fcc 100644
--- a/src/controller/CHIPDeviceController.cpp
+++ b/src/controller/CHIPDeviceController.cpp
@@ -896,11 +896,8 @@ CHIP_ERROR DeviceCommissioner::StopPairing(NodeId remoteDeviceId)
 CHIP_ERROR DeviceCommissioner::UnpairDevice(NodeId remoteDeviceId)
 {
     MATTER_TRACE_EVENT_SCOPE("UnpairDevice", "DeviceCommissioner");
+    VerifyOrReturnError(mState == State::Initialized, CHIP_ERROR_INCORRECT_STATE);
 
-    if (mState != State::Initialized) // the device is currently being paired
-    {
-        return StopPairing(remoteDeviceId);
-    }
     return AutoCurrentFabricRemover::RemoveCurrentFabric(this, remoteDeviceId);
 }
 
