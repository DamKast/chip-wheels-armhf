diff --git a/src/controller/CHIPDeviceController.cpp b/src/controller/CHIPDeviceController.cpp
index f0caac0d7..86fe76d3e 100644
--- a/src/controller/CHIPDeviceController.cpp
+++ b/src/controller/CHIPDeviceController.cpp
@@ -900,6 +900,15 @@ CHIP_ERROR DeviceCommissioner::UnpairDevice(NodeId remoteDeviceId)
     return AutoCurrentFabricRemover::RemoveCurrentFabric(this, remoteDeviceId);
 }
 
+CHIP_ERROR DeviceCommissioner::UnpairDevice(NodeId remoteDeviceId, chip::Callback::Callback<OnCurrentFabricRemove> * callback)
+{
+    MATTER_TRACE_EVENT_SCOPE("UnpairDevice", "DeviceCommissioner");
+    VerifyOrReturnError(mState == State::Initialized, CHIP_ERROR_INCORRECT_STATE);
+
+    return CurrentFabricRemover::RemoveCurrentFabric(remoteDeviceId, callback);
+}
+
+
 void DeviceCommissioner::RendezvousCleanup(CHIP_ERROR status)
 {
     if (mDeviceInPASEEstablishment != nullptr)
diff --git a/src/controller/CHIPDeviceController.h b/src/controller/CHIPDeviceController.h
index d73950fd1..92a590819 100644
--- a/src/controller/CHIPDeviceController.h
+++ b/src/controller/CHIPDeviceController.h
@@ -359,6 +359,11 @@ typedef void (*OnExtendFailsafeSuccess)(
     void * context, const app::Clusters::GeneralCommissioning::Commands::ArmFailSafeResponse::DecodableType & data);
 typedef void (*OnExtendFailsafeFailure)(void * context, CHIP_ERROR error);
 
+/**
+ * @brief Callback prototype for Unpair Device command.
+ */
+ typedef void (*OnCurrentFabricRemove)(void * context, NodeId remoteNodeId, CHIP_ERROR status);
+
 /**
  * @brief
  *   The commissioner applications can use this class to pair new/unpaired CHIP devices. The application is
@@ -530,6 +535,18 @@ public:
      */
     CHIP_ERROR UnpairDevice(NodeId remoteDeviceId);
 
+    /**
+     * @brief
+     *    Remove pairing for a paired device. If the device is currently being paired, it'll stop the pairing process.
+     * @param[in] remoteDeviceId        The remote device Id.
+     * @param[in] callback              The callback to be called when the device is unpaired.
+     * 
+     * 
+     * @return CHIP_ERROR               CHIP_NO_ERROR on success, or corresponding error
+    */
+    CHIP_ERROR UnpairDevice(NodeId remoteDeviceId, chip::Callback::Callback<OnCurrentFabricRemove> * callback); 
+
+
     //////////// SessionEstablishmentDelegate Implementation ///////////////
     void OnSessionEstablishmentError(CHIP_ERROR error) override;
     void OnSessionEstablished(const SessionHandle & session) override;
diff --git a/src/controller/python/ChipDeviceController-ScriptBinding.cpp b/src/controller/python/ChipDeviceController-ScriptBinding.cpp
index eaced9431..b2cd77408 100644
--- a/src/controller/python/ChipDeviceController-ScriptBinding.cpp
+++ b/src/controller/python/ChipDeviceController-ScriptBinding.cpp
@@ -131,6 +131,7 @@ PyChipError pychip_DeviceController_ConnectIP(chip::Controller::DeviceCommission
                                               uint32_t setupPINCode, chip::NodeId nodeid);
 PyChipError pychip_DeviceController_ConnectWithCode(chip::Controller::DeviceCommissioner * devCtrl, const char * onboardingPayload,
                                                     chip::NodeId nodeid);
+PyChipError pychip_DeviceController_UnpairDevice(chip::Controller::DeviceCommissioner * devCtrl, chip::NodeId remoteDeviceId);
 PyChipError pychip_DeviceController_SetThreadOperationalDataset(const char * threadOperationalDataset, uint32_t size);
 PyChipError pychip_DeviceController_SetWiFiCredentials(const char * ssid, const char * credentials);
 PyChipError pychip_DeviceController_CloseSession(chip::Controller::DeviceCommissioner * devCtrl, chip::NodeId nodeid);
@@ -386,6 +387,11 @@ PyChipError pychip_DeviceController_ConnectWithCode(chip::Controller::DeviceComm
     return ToPyChipError(devCtrl->PairDevice(nodeid, onboardingPayload, sCommissioningParameters));
 }
 
+PyChipError pychip_DeviceController_UnpairDevice(chip::Controller::DeviceCommissioner * devCtrl, chip::NodeId nodeid)
+{
+    return ToPyChipError(devCtrl->UnpairDevice(nodeid));
+}
+
 PyChipError pychip_DeviceController_OnNetworkCommission(chip::Controller::DeviceCommissioner * devCtrl, uint64_t nodeId,
                                                         uint32_t setupPasscode, const uint8_t filterType, const char * filterParam)
 {
diff --git a/src/controller/python/chip/ChipDeviceCtrl.py b/src/controller/python/chip/ChipDeviceCtrl.py
index 3626dac00..bffe6ffa7 100644
--- a/src/controller/python/chip/ChipDeviceCtrl.py
+++ b/src/controller/python/chip/ChipDeviceCtrl.py
@@ -385,7 +385,15 @@ class ChipDeviceControllerBase():
             # Error 50 is a timeout
             return False
         return self._ChipStack.commissioningEventRes.is_success
+    
+    def UnpairDevice(self, nodeid: int):
+        self.CheckIsActive()
 
+        return self._ChipStack.CallAsync(
+            lambda: self._dmLib.pychip_DeviceController_UnpairDevice(
+                self.devCtrl, nodeid)
+        ).raise_on_error()
+    
     def CloseBLEConnection(self):
         self.CheckIsActive()
 
@@ -1274,6 +1282,10 @@ class ChipDeviceControllerBase():
                 c_void_p, c_char_p, c_uint64]
             self._dmLib.pychip_DeviceController_ConnectWithCode.restype = PyChipError
 
+            self._dmLib.pychip_DeviceController_UnpairDevice.argtypes = [
+                c_void_p, c_uint64]
+            self._dmLib.pychip_DeviceController_UnpairDevice.restype = PyChipError
+
             self._dmLib.pychip_DeviceController_CloseSession.argtypes = [
                 c_void_p, c_uint64]
             self._dmLib.pychip_DeviceController_CloseSession.restype = PyChipError
