diff --git a/src/controller/python/ChipDeviceController-ScriptBinding.cpp b/src/controller/python/ChipDeviceController-ScriptBinding.cpp
index eaced9431..1a2fc1b3e 100644
--- a/src/controller/python/ChipDeviceController-ScriptBinding.cpp
+++ b/src/controller/python/ChipDeviceController-ScriptBinding.cpp
@@ -48,6 +48,7 @@
 #include <controller/CHIPDeviceControllerFactory.h>
 #include <controller/CommissioningDelegate.h>
 #include <controller/CommissioningWindowOpener.h>
+#include <controller/CurrentFabricRemover.h>
 #include <controller/ExampleOperationalCredentialsIssuer.h>
 
 #include <controller/python/ChipDeviceController-ScriptDevicePairingDelegate.h>
@@ -131,6 +132,7 @@ PyChipError pychip_DeviceController_ConnectIP(chip::Controller::DeviceCommission
                                               uint32_t setupPINCode, chip::NodeId nodeid);
 PyChipError pychip_DeviceController_ConnectWithCode(chip::Controller::DeviceCommissioner * devCtrl, const char * onboardingPayload,
                                                     chip::NodeId nodeid);
+PyChipError pychip_DeviceController_UnpairDevice(chip::Controller::DeviceCommissioner * devCtrl, chip::NodeId remoteDeviceId);
 PyChipError pychip_DeviceController_SetThreadOperationalDataset(const char * threadOperationalDataset, uint32_t size);
 PyChipError pychip_DeviceController_SetWiFiCredentials(const char * ssid, const char * credentials);
 PyChipError pychip_DeviceController_CloseSession(chip::Controller::DeviceCommissioner * devCtrl, chip::NodeId nodeid);
@@ -386,6 +388,26 @@ PyChipError pychip_DeviceController_ConnectWithCode(chip::Controller::DeviceComm
     return ToPyChipError(devCtrl->PairDevice(nodeid, onboardingPayload, sCommissioningParameters));
 }
 
+PyChipError pychip_DeviceController_UnpairDevice(chip::Controller::DeviceCommissioner * devCtrl, chip::NodeId nodeid)
+{
+    return ToPyChipError(devCtrl->UnpairDevice(nodeid));
+}
+
+PyChipError pychip_DeviceController_UnpairDevice(chip::Controller::DeviceCommissioner * devCtrl, chip::NodeId nodeid, UnpairDeviceCompleteFunct onComplete)
+{
+    // Create a new CurrentFabricRemover instance
+    auto fabricRemover = new chip::Controller::CurrentFabricRemover(this);
+
+    // Pass the onComplete callback and nodeid to the RemoveCurrentFabric function
+    CHIP_ERROR err = fabricRemover->RemoveCurrentFabric(nodeid, onComplete);
+
+
+    // Note: The fabricRemover instance will need to be cleaned up at some point. You could store it in a data structure or use another mechanism to ensure it is properly managed.
+
+    return ToPyChipError(err);
+}
+
+
 PyChipError pychip_DeviceController_OnNetworkCommission(chip::Controller::DeviceCommissioner * devCtrl, uint64_t nodeId,
                                                         uint32_t setupPasscode, const uint8_t filterType, const char * filterParam)
 {
diff --git a/src/controller/python/chip/ChipDeviceCtrl.py b/src/controller/python/chip/ChipDeviceCtrl.py
index 3626dac00..8578db819 100644
--- a/src/controller/python/chip/ChipDeviceCtrl.py
+++ b/src/controller/python/chip/ChipDeviceCtrl.py
@@ -60,6 +60,7 @@ from .native import PyChipError
 __all__ = ["ChipDeviceController"]
 
 _DevicePairingDelegate_OnPairingCompleteFunct = CFUNCTYPE(None, PyChipError)
+_DeviceUnpairingCompleteFunct = CFUNCTYPE(None, c_void_p, c_uint64, PyChipError)
 _DevicePairingDelegate_OnCommissioningCompleteFunct = CFUNCTYPE(
     None, c_uint64, PyChipError)
 _DevicePairingDelegate_OnOpenWindowCompleteFunct = CFUNCTYPE(
@@ -248,6 +249,17 @@ class ChipDeviceControllerBase():
             self._ChipStack.callbackRes = err
             self._ChipStack.completeEvent.set()
 
+        def HandleUnpairDeviceComplete(nodeid: int, err: PyChipError):
+            if err.is_success:
+                print("Succesfully unpaired device with nodeid {}".format(nodeid))
+            else:
+                print("Failed to unpair device: {}".format(err))
+
+            print("jesus it worked, lol")
+
+            self._ChipStack.callbackRes = err
+            self._ChipStack.completeEvent.set()
+
         def HandlePASEEstablishmentComplete(err: PyChipError):
             if not err.is_success:
                 print("Failed to establish secure session to device: {}".format(err))
@@ -283,6 +295,8 @@ class ChipDeviceControllerBase():
             HandleOpenWindowComplete)
         self._dmLib.pychip_ScriptDevicePairingDelegate_SetOpenWindowCompleteCallback(
             self.devCtrl, self.cbHandleOpenWindowCompleteFunct)
+        self.cbHandleDeviceUnpairCompleteFunct = _DeviceUnpairingCompleteFunct(
+            HandleUnpairDeviceComplete)
 
         self.state = DCState.IDLE
         self._isActive = True
@@ -385,7 +399,15 @@ class ChipDeviceControllerBase():
             # Error 50 is a timeout
             return False
         return self._ChipStack.commissioningEventRes.is_success
+    
+    def UnpairDevice(self, nodeid: int):
+        self.CheckIsActive()
 
+        return self._ChipStack.CallAsync(
+            lambda: self._dmLib.pychip_DeviceController_UnpairDevice(
+                self.devCtrl, nodeid, self.cbHandleDeviceUnpairCompleteFunct)
+        ).raise_on_error()
+    
     def CloseBLEConnection(self):
         self.CheckIsActive()
 
@@ -1274,6 +1296,10 @@ class ChipDeviceControllerBase():
                 c_void_p, c_char_p, c_uint64]
             self._dmLib.pychip_DeviceController_ConnectWithCode.restype = PyChipError
 
+            self._dmLib.pychip_DeviceController_UnpairDevice.argtypes = [
+                c_void_p, c_uint64]
+            self._dmLib.pychip_DeviceController_UnpairDevice.restype = PyChipError
+
             self._dmLib.pychip_DeviceController_CloseSession.argtypes = [
                 c_void_p, c_uint64]
             self._dmLib.pychip_DeviceController_CloseSession.restype = PyChipError
